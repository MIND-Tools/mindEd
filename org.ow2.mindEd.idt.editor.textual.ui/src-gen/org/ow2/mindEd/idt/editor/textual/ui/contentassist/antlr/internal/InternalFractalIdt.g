/*
* generated by Xtext
*/
grammar InternalFractalIdt;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.ow2.mindEd.idt.editor.textual.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.ow2.mindEd.idt.editor.textual.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.ow2.mindEd.idt.editor.textual.services.FractalIdtGrammarAccess;

}

@parser::members {
 
 	private FractalIdtGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(FractalIdtGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleIdtFile
entryRuleIdtFile 
:
{ before(grammarAccess.getIdtFileRule()); }
	 ruleIdtFile
{ after(grammarAccess.getIdtFileRule()); } 
	 EOF 
;

// Rule IdtFile
ruleIdtFile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdtFileAccess().getGroup()); }
(rule__IdtFile__Group__0)
{ after(grammarAccess.getIdtFileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantDefinitionBegin
entryRuleConstantDefinitionBegin 
:
{ before(grammarAccess.getConstantDefinitionBeginRule()); }
	 ruleConstantDefinitionBegin
{ after(grammarAccess.getConstantDefinitionBeginRule()); } 
	 EOF 
;

// Rule ConstantDefinitionBegin
ruleConstantDefinitionBegin
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantDefinitionBeginAccess().getGroup()); }
(rule__ConstantDefinitionBegin__Group__0)
{ after(grammarAccess.getConstantDefinitionBeginAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantDefinitionEnd
entryRuleConstantDefinitionEnd 
:
{ before(grammarAccess.getConstantDefinitionEndRule()); }
	 ruleConstantDefinitionEnd
{ after(grammarAccess.getConstantDefinitionEndRule()); } 
	 EOF 
;

// Rule ConstantDefinitionEnd
ruleConstantDefinitionEnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantDefinitionEndAccess().getEndifKeyword()); }

	'#endif' 

{ after(grammarAccess.getConstantDefinitionEndAccess().getEndifKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition 
:
{ before(grammarAccess.getTypeDefinitionRule()); }
	 ruleTypeDefinition
{ after(grammarAccess.getTypeDefinitionRule()); } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDefinitionAccess().getGroup()); }
(rule__TypeDefinition__Group__0)
{ after(grammarAccess.getTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypedefSpecification
entryRuleTypedefSpecification 
:
{ before(grammarAccess.getTypedefSpecificationRule()); }
	 ruleTypedefSpecification
{ after(grammarAccess.getTypedefSpecificationRule()); } 
	 EOF 
;

// Rule TypedefSpecification
ruleTypedefSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypedefSpecificationAccess().getGroup()); }
(rule__TypedefSpecification__Group__0)
{ after(grammarAccess.getTypedefSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedTypeSpecification
entryRuleQualifiedTypeSpecification 
:
{ before(grammarAccess.getQualifiedTypeSpecificationRule()); }
	 ruleQualifiedTypeSpecification
{ after(grammarAccess.getQualifiedTypeSpecificationRule()); } 
	 EOF 
;

// Rule QualifiedTypeSpecification
ruleQualifiedTypeSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedTypeSpecificationAccess().getGroup()); }
(rule__QualifiedTypeSpecification__Group__0)
{ after(grammarAccess.getQualifiedTypeSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeSpecification
entryRuleTypeSpecification 
:
{ before(grammarAccess.getTypeSpecificationRule()); }
	 ruleTypeSpecification
{ after(grammarAccess.getTypeSpecificationRule()); } 
	 EOF 
;

// Rule TypeSpecification
ruleTypeSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeSpecificationAccess().getAlternatives()); }
(rule__TypeSpecification__Alternatives)
{ after(grammarAccess.getTypeSpecificationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructOrUnionSpecification
entryRuleStructOrUnionSpecification 
:
{ before(grammarAccess.getStructOrUnionSpecificationRule()); }
	 ruleStructOrUnionSpecification
{ after(grammarAccess.getStructOrUnionSpecificationRule()); } 
	 EOF 
;

// Rule StructOrUnionSpecification
ruleStructOrUnionSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructOrUnionSpecificationAccess().getAlternatives()); }
(rule__StructOrUnionSpecification__Alternatives)
{ after(grammarAccess.getStructOrUnionSpecificationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructOrUnionDefinition
entryRuleStructOrUnionDefinition 
:
{ before(grammarAccess.getStructOrUnionDefinitionRule()); }
	 ruleStructOrUnionDefinition
{ after(grammarAccess.getStructOrUnionDefinitionRule()); } 
	 EOF 
;

// Rule StructOrUnionDefinition
ruleStructOrUnionDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructOrUnionDefinitionAccess().getGroup()); }
(rule__StructOrUnionDefinition__Group__0)
{ after(grammarAccess.getStructOrUnionDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructorUnionReference
entryRuleStructorUnionReference 
:
{ before(grammarAccess.getStructorUnionReferenceRule()); }
	 ruleStructorUnionReference
{ after(grammarAccess.getStructorUnionReferenceRule()); } 
	 EOF 
;

// Rule StructorUnionReference
ruleStructorUnionReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructorUnionReferenceAccess().getGroup()); }
(rule__StructorUnionReference__Group__0)
{ after(grammarAccess.getStructorUnionReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructOrUnion
entryRuleStructOrUnion 
:
{ before(grammarAccess.getStructOrUnionRule()); }
	 ruleStructOrUnion
{ after(grammarAccess.getStructOrUnionRule()); } 
	 EOF 
;

// Rule StructOrUnion
ruleStructOrUnion
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructOrUnionAccess().getAlternatives()); }
(rule__StructOrUnion__Alternatives)
{ after(grammarAccess.getStructOrUnionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructMember
entryRuleStructMember 
:
{ before(grammarAccess.getStructMemberRule()); }
	 ruleStructMember
{ after(grammarAccess.getStructMemberRule()); } 
	 EOF 
;

// Rule StructMember
ruleStructMember
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructMemberAccess().getGroup()); }
(rule__StructMember__Group__0)
{ after(grammarAccess.getStructMemberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumSpecification
entryRuleEnumSpecification 
:
{ before(grammarAccess.getEnumSpecificationRule()); }
	 ruleEnumSpecification
{ after(grammarAccess.getEnumSpecificationRule()); } 
	 EOF 
;

// Rule EnumSpecification
ruleEnumSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumSpecificationAccess().getAlternatives()); }
(rule__EnumSpecification__Alternatives)
{ after(grammarAccess.getEnumSpecificationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumDefinition
entryRuleEnumDefinition 
:
{ before(grammarAccess.getEnumDefinitionRule()); }
	 ruleEnumDefinition
{ after(grammarAccess.getEnumDefinitionRule()); } 
	 EOF 
;

// Rule EnumDefinition
ruleEnumDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumDefinitionAccess().getGroup()); }
(rule__EnumDefinition__Group__0)
{ after(grammarAccess.getEnumDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumReference
entryRuleEnumReference 
:
{ before(grammarAccess.getEnumReferenceRule()); }
	 ruleEnumReference
{ after(grammarAccess.getEnumReferenceRule()); } 
	 EOF 
;

// Rule EnumReference
ruleEnumReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumReferenceAccess().getGroup()); }
(rule__EnumReference__Group__0)
{ after(grammarAccess.getEnumReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumMemberList
entryRuleEnumMemberList 
:
{ before(grammarAccess.getEnumMemberListRule()); }
	 ruleEnumMemberList
{ after(grammarAccess.getEnumMemberListRule()); } 
	 EOF 
;

// Rule EnumMemberList
ruleEnumMemberList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumMemberListAccess().getGroup()); }
(rule__EnumMemberList__Group__0)
{ after(grammarAccess.getEnumMemberListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumMember
entryRuleEnumMember 
:
{ before(grammarAccess.getEnumMemberRule()); }
	 ruleEnumMember
{ after(grammarAccess.getEnumMemberRule()); } 
	 EOF 
;

// Rule EnumMember
ruleEnumMember
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumMemberAccess().getGroup()); }
(rule__EnumMember__Group__0)
{ after(grammarAccess.getEnumMemberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarators
entryRuleDeclarators 
:
{ before(grammarAccess.getDeclaratorsRule()); }
	 ruleDeclarators
{ after(grammarAccess.getDeclaratorsRule()); } 
	 EOF 
;

// Rule Declarators
ruleDeclarators
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaratorsAccess().getGroup()); }
(rule__Declarators__Group__0)
{ after(grammarAccess.getDeclaratorsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarator
entryRuleDeclarator 
:
{ before(grammarAccess.getDeclaratorRule()); }
	 ruleDeclarator
{ after(grammarAccess.getDeclaratorRule()); } 
	 EOF 
;

// Rule Declarator
ruleDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaratorAccess().getGroup()); }
(rule__Declarator__Group__0)
{ after(grammarAccess.getDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedPointerSpecification
entryRuleQualifiedPointerSpecification 
:
{ before(grammarAccess.getQualifiedPointerSpecificationRule()); }
	 ruleQualifiedPointerSpecification
{ after(grammarAccess.getQualifiedPointerSpecificationRule()); } 
	 EOF 
;

// Rule QualifiedPointerSpecification
ruleQualifiedPointerSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedPointerSpecificationAccess().getGroup()); }
(rule__QualifiedPointerSpecification__Group__0)
{ after(grammarAccess.getQualifiedPointerSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDirectNamedDeclarator
entryRuleDirectNamedDeclarator 
:
{ before(grammarAccess.getDirectNamedDeclaratorRule()); }
	 ruleDirectNamedDeclarator
{ after(grammarAccess.getDirectNamedDeclaratorRule()); } 
	 EOF 
;

// Rule DirectNamedDeclarator
ruleDirectNamedDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDirectNamedDeclaratorAccess().getGroup()); }
(rule__DirectNamedDeclarator__Group__0)
{ after(grammarAccess.getDirectNamedDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDirectAnonymousDeclarator
entryRuleDirectAnonymousDeclarator 
:
{ before(grammarAccess.getDirectAnonymousDeclaratorRule()); }
	 ruleDirectAnonymousDeclarator
{ after(grammarAccess.getDirectAnonymousDeclaratorRule()); } 
	 EOF 
;

// Rule DirectAnonymousDeclarator
ruleDirectAnonymousDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDirectAnonymousDeclaratorAccess().getGroup()); }
(rule__DirectAnonymousDeclarator__Group__0)
{ after(grammarAccess.getDirectAnonymousDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArraySpecification
entryRuleArraySpecification 
:
{ before(grammarAccess.getArraySpecificationRule()); }
	 ruleArraySpecification
{ after(grammarAccess.getArraySpecificationRule()); } 
	 EOF 
;

// Rule ArraySpecification
ruleArraySpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArraySpecificationAccess().getAlternatives()); }
(rule__ArraySpecification__Alternatives)
{ after(grammarAccess.getArraySpecificationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantDefinition
entryRuleConstantDefinition 
:
{ before(grammarAccess.getConstantDefinitionRule()); }
	 ruleConstantDefinition
{ after(grammarAccess.getConstantDefinitionRule()); } 
	 EOF 
;

// Rule ConstantDefinition
ruleConstantDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantDefinitionAccess().getGroup()); }
(rule__ConstantDefinition__Group__0)
{ after(grammarAccess.getConstantDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceDefinition
entryRuleInterfaceDefinition 
:
{ before(grammarAccess.getInterfaceDefinitionRule()); }
	 ruleInterfaceDefinition
{ after(grammarAccess.getInterfaceDefinitionRule()); } 
	 EOF 
;

// Rule InterfaceDefinition
ruleInterfaceDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getGroup()); }
(rule__InterfaceDefinition__Group__0)
{ after(grammarAccess.getInterfaceDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodDefinition
entryRuleMethodDefinition 
:
{ before(grammarAccess.getMethodDefinitionRule()); }
	 ruleMethodDefinition
{ after(grammarAccess.getMethodDefinitionRule()); } 
	 EOF 
;

// Rule MethodDefinition
ruleMethodDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodDefinitionAccess().getGroup()); }
(rule__MethodDefinition__Group__0)
{ after(grammarAccess.getMethodDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterList
entryRuleParameterList 
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleParameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule ParameterList
ruleParameterList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterListAccess().getGroup()); }
(rule__ParameterList__Group__0)
{ after(grammarAccess.getParameterListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIncludeDirective
entryRuleIncludeDirective 
:
{ before(grammarAccess.getIncludeDirectiveRule()); }
	 ruleIncludeDirective
{ after(grammarAccess.getIncludeDirectiveRule()); } 
	 EOF 
;

// Rule IncludeDirective
ruleIncludeDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getGroup()); }
(rule__IncludeDirective__Group__0)
{ after(grammarAccess.getIncludeDirectiveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotationsList
entryRuleAnnotationsList 
:
{ before(grammarAccess.getAnnotationsListRule()); }
	 ruleAnnotationsList
{ after(grammarAccess.getAnnotationsListRule()); } 
	 EOF 
;

// Rule AnnotationsList
ruleAnnotationsList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationsListAccess().getGroup()); }
(rule__AnnotationsList__Group__0)
{ after(grammarAccess.getAnnotationsListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotation
entryRuleAnnotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getGroup()); }
(rule__Annotation__Group__0)
{ after(grammarAccess.getAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotationValuePair
entryRuleAnnotationValuePair 
:
{ before(grammarAccess.getAnnotationValuePairRule()); }
	 ruleAnnotationValuePair
{ after(grammarAccess.getAnnotationValuePairRule()); } 
	 EOF 
;

// Rule AnnotationValuePair
ruleAnnotationValuePair
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationValuePairAccess().getGroup()); }
(rule__AnnotationValuePair__Group__0)
{ after(grammarAccess.getAnnotationValuePairAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotationValue
entryRuleAnnotationValue 
:
{ before(grammarAccess.getAnnotationValueRule()); }
	 ruleAnnotationValue
{ after(grammarAccess.getAnnotationValueRule()); } 
	 EOF 
;

// Rule AnnotationValue
ruleAnnotationValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationValueAccess().getAlternatives()); }
(rule__AnnotationValue__Alternatives)
{ after(grammarAccess.getAnnotationValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayAnnotationValue
entryRuleArrayAnnotationValue 
:
{ before(grammarAccess.getArrayAnnotationValueRule()); }
	 ruleArrayAnnotationValue
{ after(grammarAccess.getArrayAnnotationValueRule()); } 
	 EOF 
;

// Rule ArrayAnnotationValue
ruleArrayAnnotationValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayAnnotationValueAccess().getGroup()); }
(rule__ArrayAnnotationValue__Group__0)
{ after(grammarAccess.getArrayAnnotationValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesignedINT
entryRulesignedINT 
:
{ before(grammarAccess.getSignedINTRule()); }
	 rulesignedINT
{ after(grammarAccess.getSignedINTRule()); } 
	 EOF 
;

// Rule signedINT
rulesignedINT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignedINTAccess().getGroup()); }
(rule__SignedINT__Group__0)
{ after(grammarAccess.getSignedINTAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantExpression
entryRuleConstantExpression 
:
{ before(grammarAccess.getConstantExpressionRule()); }
	 ruleConstantExpression
{ after(grammarAccess.getConstantExpressionRule()); } 
	 EOF 
;

// Rule ConstantExpression
ruleConstantExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantExpressionAccess().getLogicalOrExpressionParserRuleCall()); }
	ruleLogicalOrExpression
{ after(grammarAccess.getConstantExpressionAccess().getLogicalOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXorExpression
entryRuleXorExpression 
:
{ before(grammarAccess.getXorExpressionRule()); }
	 ruleXorExpression
{ after(grammarAccess.getXorExpressionRule()); } 
	 EOF 
;

// Rule XorExpression
ruleXorExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXorExpressionAccess().getGroup()); }
(rule__XorExpression__Group__0)
{ after(grammarAccess.getXorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShiftExpression
entryRuleShiftExpression 
:
{ before(grammarAccess.getShiftExpressionRule()); }
	 ruleShiftExpression
{ after(grammarAccess.getShiftExpressionRule()); } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getShiftExpressionAccess().getGroup()); }
(rule__ShiftExpression__Group__0)
{ after(grammarAccess.getShiftExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMulExpression
entryRuleMulExpression 
:
{ before(grammarAccess.getMulExpressionRule()); }
	 ruleMulExpression
{ after(grammarAccess.getMulExpressionRule()); } 
	 EOF 
;

// Rule MulExpression
ruleMulExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMulExpressionAccess().getGroup()); }
(rule__MulExpression__Group__0)
{ after(grammarAccess.getMulExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCastExpression
entryRuleCastExpression 
:
{ before(grammarAccess.getCastExpressionRule()); }
	 ruleCastExpression
{ after(grammarAccess.getCastExpressionRule()); } 
	 EOF 
;

// Rule CastExpression
ruleCastExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCastExpressionAccess().getAlternatives()); }
(rule__CastExpression__Alternatives)
{ after(grammarAccess.getCastExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
(rule__UnaryExpression__Group__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatingPointLiteral
entryRuleFloatingPointLiteral 
:
{ before(grammarAccess.getFloatingPointLiteralRule()); }
	 ruleFloatingPointLiteral
{ after(grammarAccess.getFloatingPointLiteralRule()); } 
	 EOF 
;

// Rule FloatingPointLiteral
ruleFloatingPointLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getAlternatives()); }
(rule__FloatingPointLiteral__Alternatives)
{ after(grammarAccess.getFloatingPointLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExponent
entryRuleExponent 
:
{ before(grammarAccess.getExponentRule()); }
	 ruleExponent
{ after(grammarAccess.getExponentRule()); } 
	 EOF 
;

// Rule Exponent
ruleExponent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExponentAccess().getGroup()); }
(rule__Exponent__Group__0)
{ after(grammarAccess.getExponentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule TypeQualifier
ruleTypeQualifier
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeQualifierAccess().getAlternatives()); }
(rule__TypeQualifier__Alternatives)
{ after(grammarAccess.getTypeQualifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule TypeSpecifier
ruleTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getAlternatives()); }
(rule__TypeSpecifier__Alternatives)
{ after(grammarAccess.getTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ParameterQualifier
ruleParameterQualifier
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterQualifierAccess().getAlternatives()); }
(rule__ParameterQualifier__Alternatives)
{ after(grammarAccess.getParameterQualifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__IdtFile__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getConstantAssignment_3_0()); }
(rule__IdtFile__ConstantAssignment_3_0)
{ after(grammarAccess.getIdtFileAccess().getConstantAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getIdtFileAccess().getTypeAssignment_3_1()); }
(rule__IdtFile__TypeAssignment_3_1)
{ after(grammarAccess.getIdtFileAccess().getTypeAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDefinition__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefinitionAccess().getTypedefSpecificationParserRuleCall_0_0()); }
	ruleTypedefSpecification
{ after(grammarAccess.getTypeDefinitionAccess().getTypedefSpecificationParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getStructOrUnionSpecificationParserRuleCall_0_1()); }
	ruleStructOrUnionSpecification
{ after(grammarAccess.getTypeDefinitionAccess().getStructOrUnionSpecificationParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getEnumSpecificationParserRuleCall_0_2()); }
	ruleEnumSpecification
{ after(grammarAccess.getTypeDefinitionAccess().getEnumSpecificationParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecification__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecificationAccess().getTypeDefNameAssignment_0()); }
(rule__TypeSpecification__TypeDefNameAssignment_0)
{ after(grammarAccess.getTypeSpecificationAccess().getTypeDefNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getTypeSpecificationAccess().getStructOrUnionSpecificationParserRuleCall_1()); }
	ruleStructOrUnionSpecification
{ after(grammarAccess.getTypeSpecificationAccess().getStructOrUnionSpecificationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeSpecificationAccess().getEnumSpecificationParserRuleCall_2()); }
	ruleEnumSpecification
{ after(grammarAccess.getTypeSpecificationAccess().getEnumSpecificationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTypeSpecificationAccess().getGroup_3()); }
(rule__TypeSpecification__Group_3__0)
{ after(grammarAccess.getTypeSpecificationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionSpecification__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionSpecificationAccess().getStructOrUnionDefinitionParserRuleCall_0()); }
	ruleStructOrUnionDefinition
{ after(grammarAccess.getStructOrUnionSpecificationAccess().getStructOrUnionDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStructOrUnionSpecificationAccess().getStructorUnionReferenceParserRuleCall_1()); }
	ruleStructorUnionReference
{ after(grammarAccess.getStructOrUnionSpecificationAccess().getStructorUnionReferenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnion__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionAccess().getStructKeyword_0()); }

	'struct' 

{ after(grammarAccess.getStructOrUnionAccess().getStructKeyword_0()); }
)

    |(
{ before(grammarAccess.getStructOrUnionAccess().getUnionKeyword_1()); }

	'union' 

{ after(grammarAccess.getStructOrUnionAccess().getUnionKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecification__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecificationAccess().getEnumDefinitionParserRuleCall_0()); }
	ruleEnumDefinition
{ after(grammarAccess.getEnumSpecificationAccess().getEnumDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEnumSpecificationAccess().getEnumReferenceParserRuleCall_1()); }
	ruleEnumReference
{ after(grammarAccess.getEnumSpecificationAccess().getEnumReferenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDcAssignment_1_0()); }
(rule__Declarator__DcAssignment_1_0)
{ after(grammarAccess.getDeclaratorAccess().getDcAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getDeclaratorAccess().getDcAssignment_1_1()); }
(rule__Declarator__DcAssignment_1_1)
{ after(grammarAccess.getDeclaratorAccess().getDcAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getDeclaratorAccess().getGroup_1_2()); }
(rule__Declarator__Group_1_2__0)
{ after(grammarAccess.getDeclaratorAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecification__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySpecificationAccess().getGroup_0()); }
(rule__ArraySpecification__Group_0__0)
{ after(grammarAccess.getArraySpecificationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getArraySpecificationAccess().getGroup_1()); }
(rule__ArraySpecification__Group_1__0)
{ after(grammarAccess.getArraySpecificationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getGroup_4_0()); }
(rule__MethodDefinition__Group_4_0__0)
{ after(grammarAccess.getMethodDefinitionAccess().getGroup_4_0()); }
)

    |(
{ before(grammarAccess.getMethodDefinitionAccess().getGroup_4_1()); }
(rule__MethodDefinition__Group_4_1__0)
{ after(grammarAccess.getMethodDefinitionAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getGroup_1_0()); }
(rule__IncludeDirective__Group_1_0__0)
{ after(grammarAccess.getIncludeDirectiveAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getIncludeDirectiveAccess().getIncludeIDAssignment_1_1()); }
(rule__IncludeDirective__IncludeIDAssignment_1_1)
{ after(grammarAccess.getIncludeDirectiveAccess().getIncludeIDAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationValueAccess().getValueAssignment_0()); }
(rule__AnnotationValue__ValueAssignment_0)
{ after(grammarAccess.getAnnotationValueAccess().getValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getAnnotationValueAccess().getArrayValueAssignment_1()); }
(rule__AnnotationValue__ArrayValueAssignment_1)
{ after(grammarAccess.getAnnotationValueAccess().getArrayValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationValue__ValueAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationValueAccess().getValueSignedINTParserRuleCall_0_0_0()); }
	rulesignedINT
{ after(grammarAccess.getAnnotationValueAccess().getValueSignedINTParserRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getAnnotationValueAccess().getValueNullKeyword_0_0_1()); }

	'null' 

{ after(grammarAccess.getAnnotationValueAccess().getValueNullKeyword_0_0_1()); }
)

    |(
{ before(grammarAccess.getAnnotationValueAccess().getValueBOOLEANTerminalRuleCall_0_0_2()); }
	RULE_BOOLEAN
{ after(grammarAccess.getAnnotationValueAccess().getValueBOOLEANTerminalRuleCall_0_0_2()); }
)

    |(
{ before(grammarAccess.getAnnotationValueAccess().getValueQualifiedNameParserRuleCall_0_0_3()); }
	ruleQualifiedName
{ after(grammarAccess.getAnnotationValueAccess().getValueQualifiedNameParserRuleCall_0_0_3()); }
)

    |(
{ before(grammarAccess.getAnnotationValueAccess().getValueSTRINGTerminalRuleCall_0_0_4()); }
	RULE_STRING
{ after(grammarAccess.getAnnotationValueAccess().getValueSTRINGTerminalRuleCall_0_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExpressionAccess().getGroup_0()); }
(rule__CastExpression__Group_0__0)
{ after(grammarAccess.getCastExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getCastExpressionAccess().getUnaryExprAssignment_1()); }
(rule__CastExpression__UnaryExprAssignment_1)
{ after(grammarAccess.getCastExpressionAccess().getUnaryExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralAssignment_0()); }
(rule__PrimaryExpression__LiteralAssignment_0)
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralAssignment_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
(rule__PrimaryExpression__Group_1__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getLiteralAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFloatingPointLiteralParserRuleCall_2()); }
	ruleFloatingPointLiteral
{ after(grammarAccess.getLiteralAccess().getFloatingPointLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getGroup_0()); }
(rule__FloatingPointLiteral__Group_0__0)
{ after(grammarAccess.getFloatingPointLiteralAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFloatingPointLiteralAccess().getGroup_1()); }
(rule__FloatingPointLiteral__Group_1__0)
{ after(grammarAccess.getFloatingPointLiteralAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getFloatingPointLiteralAccess().getGroup_2()); }
(rule__FloatingPointLiteral__Group_2__0)
{ after(grammarAccess.getFloatingPointLiteralAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getFloatingPointLiteralAccess().getGroup_3()); }
(rule__FloatingPointLiteral__Group_3__0)
{ after(grammarAccess.getFloatingPointLiteralAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentAccess().getEKeyword_0_0()); }

	'e' 

{ after(grammarAccess.getExponentAccess().getEKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getExponentAccess().getGroup_0_1()); }
(rule__Exponent__Group_0_1__0)
{ after(grammarAccess.getExponentAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeQualifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeQualifierAccess().getConstEnumLiteralDeclaration_0()); }
(	'const' 
)
{ after(grammarAccess.getTypeQualifierAccess().getConstEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getTypeQualifierAccess().getVolatileEnumLiteralDeclaration_1()); }
(	'volatile' 
)
{ after(grammarAccess.getTypeQualifierAccess().getVolatileEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getVoidEnumLiteralDeclaration_0()); }
(	'void' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getVoidEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getCharEnumLiteralDeclaration_1()); }
(	'char' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getCharEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getShortEnumLiteralDeclaration_2()); }
(	'short' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getShortEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getIntEnumLiteralDeclaration_3()); }
(	'int' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getIntEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getLongEnumLiteralDeclaration_4()); }
(	'long' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getLongEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getFloatEnumLiteralDeclaration_5()); }
(	'float' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getFloatEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getDoubleEnumLiteralDeclaration_6()); }
(	'double' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getDoubleEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getSignedEnumLiteralDeclaration_7()); }
(	'signed' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getSignedEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getUnsignedEnumLiteralDeclaration_8()); }
(	'unsigned' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getUnsignedEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getStringEnumLiteralDeclaration_9()); }
(	'string' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getStringEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getInt8_tEnumLiteralDeclaration_10()); }
(	'int8_t' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getInt8_tEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getUint8_tEnumLiteralDeclaration_11()); }
(	'uint8_t' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getUint8_tEnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getInt16_tEnumLiteralDeclaration_12()); }
(	'int16_t' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getInt16_tEnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getUint16_tEnumLiteralDeclaration_13()); }
(	'uint16_t' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getUint16_tEnumLiteralDeclaration_13()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getInt32_tEnumLiteralDeclaration_14()); }
(	'int32_t' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getInt32_tEnumLiteralDeclaration_14()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getUint32_tEnumLiteralDeclaration_15()); }
(	'uint32_t' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getUint32_tEnumLiteralDeclaration_15()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getInt64_tEnumLiteralDeclaration_16()); }
(	'int64_t' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getInt64_tEnumLiteralDeclaration_16()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getUint64_tEnumLiteralDeclaration_17()); }
(	'uint64_t' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getUint64_tEnumLiteralDeclaration_17()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getIntptr_tEnumLiteralDeclaration_18()); }
(	'intptr_t' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getIntptr_tEnumLiteralDeclaration_18()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getUintptr_tEnumLiteralDeclaration_19()); }
(	'uintptr_t' 
)
{ after(grammarAccess.getTypeSpecifierAccess().getUintptr_tEnumLiteralDeclaration_19()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterQualifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterQualifierAccess().getInEnumLiteralDeclaration_0()); }
(	'in' 
)
{ after(grammarAccess.getParameterQualifierAccess().getInEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getParameterQualifierAccess().getOutEnumLiteralDeclaration_1()); }
(	'out' 
)
{ after(grammarAccess.getParameterQualifierAccess().getOutEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__IdtFile__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdtFile__Group__0__Impl
	rule__IdtFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getBegindefAssignment_0()); }
(rule__IdtFile__BegindefAssignment_0)
{ after(grammarAccess.getIdtFileAccess().getBegindefAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IdtFile__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdtFile__Group__1__Impl
	rule__IdtFile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getDefAssignment_1()); }
(rule__IdtFile__DefAssignment_1)
{ after(grammarAccess.getIdtFileAccess().getDefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IdtFile__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdtFile__Group__2__Impl
	rule__IdtFile__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getIncludesAssignment_2()); }
(rule__IdtFile__IncludesAssignment_2)*
{ after(grammarAccess.getIdtFileAccess().getIncludesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IdtFile__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdtFile__Group__3__Impl
	rule__IdtFile__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getAlternatives_3()); }
(rule__IdtFile__Alternatives_3)*
{ after(grammarAccess.getIdtFileAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IdtFile__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdtFile__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getEndDefAssignment_4()); }
(rule__IdtFile__EndDefAssignment_4)
{ after(grammarAccess.getIdtFileAccess().getEndDefAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ConstantDefinitionBegin__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDefinitionBegin__Group__0__Impl
	rule__ConstantDefinitionBegin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionBegin__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionBeginAccess().getIfndefKeyword_0()); }

	'#ifndef' 

{ after(grammarAccess.getConstantDefinitionBeginAccess().getIfndefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDefinitionBegin__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDefinitionBegin__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionBegin__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionBeginAccess().getNameAssignment_1()); }
(rule__ConstantDefinitionBegin__NameAssignment_1)
{ after(grammarAccess.getConstantDefinitionBeginAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__TypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDefinition__Group__0__Impl
	rule__TypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefinitionAccess().getAlternatives_0()); }
(rule__TypeDefinition__Alternatives_0)
{ after(grammarAccess.getTypeDefinitionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefinitionAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getTypeDefinitionAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypedefSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedefSpecification__Group__0__Impl
	rule__TypedefSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedefSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedefSpecificationAccess().getTypedefKeyword_0()); }

	'typedef' 

{ after(grammarAccess.getTypedefSpecificationAccess().getTypedefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedefSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedefSpecification__Group__1__Impl
	rule__TypedefSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedefSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedefSpecificationAccess().getQualifedTypeAssignment_1()); }
(rule__TypedefSpecification__QualifedTypeAssignment_1)
{ after(grammarAccess.getTypedefSpecificationAccess().getQualifedTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedefSpecification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedefSpecification__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedefSpecification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedefSpecificationAccess().getDecAssignment_2()); }
(rule__TypedefSpecification__DecAssignment_2)
{ after(grammarAccess.getTypedefSpecificationAccess().getDecAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedTypeSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedTypeSpecification__Group__0__Impl
	rule__QualifiedTypeSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedTypeSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedTypeSpecificationAccess().getTypeQualifierAssignment_0()); }
(rule__QualifiedTypeSpecification__TypeQualifierAssignment_0)*
{ after(grammarAccess.getQualifiedTypeSpecificationAccess().getTypeQualifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedTypeSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedTypeSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedTypeSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedTypeSpecificationAccess().getTypeSpecAssignment_1()); }
(rule__QualifiedTypeSpecification__TypeSpecAssignment_1)
{ after(grammarAccess.getQualifiedTypeSpecificationAccess().getTypeSpecAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeSpecification__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeSpecification__Group_3__0__Impl
	rule__TypeSpecification__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecification__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecificationAccess().getTypeSpecifierAssignment_3_0()); }
(rule__TypeSpecification__TypeSpecifierAssignment_3_0)
{ after(grammarAccess.getTypeSpecificationAccess().getTypeSpecifierAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSpecification__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeSpecification__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecification__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecificationAccess().getTypeSpecifierAssignment_3_1()); }
(rule__TypeSpecification__TypeSpecifierAssignment_3_1)*
{ after(grammarAccess.getTypeSpecificationAccess().getTypeSpecifierAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StructOrUnionDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnionDefinition__Group__0__Impl
	rule__StructOrUnionDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionDefinitionAccess().getStructAssignment_0()); }
(rule__StructOrUnionDefinition__StructAssignment_0)
{ after(grammarAccess.getStructOrUnionDefinitionAccess().getStructAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructOrUnionDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnionDefinition__Group__1__Impl
	rule__StructOrUnionDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionDefinitionAccess().getIdAssignment_1()); }
(rule__StructOrUnionDefinition__IdAssignment_1)?
{ after(grammarAccess.getStructOrUnionDefinitionAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructOrUnionDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnionDefinition__Group__2__Impl
	rule__StructOrUnionDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionDefinitionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getStructOrUnionDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructOrUnionDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnionDefinition__Group__3__Impl
	rule__StructOrUnionDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionDefinitionAccess().getStructMemberAssignment_3()); }
(rule__StructOrUnionDefinition__StructMemberAssignment_3)*
{ after(grammarAccess.getStructOrUnionDefinitionAccess().getStructMemberAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructOrUnionDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructOrUnionDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionDefinitionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getStructOrUnionDefinitionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__StructorUnionReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructorUnionReference__Group__0__Impl
	rule__StructorUnionReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructorUnionReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructorUnionReferenceAccess().getStructAssignment_0()); }
(rule__StructorUnionReference__StructAssignment_0)
{ after(grammarAccess.getStructorUnionReferenceAccess().getStructAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructorUnionReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructorUnionReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructorUnionReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructorUnionReferenceAccess().getIdAssignment_1()); }
(rule__StructorUnionReference__IdAssignment_1)
{ after(grammarAccess.getStructorUnionReferenceAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StructMember__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructMember__Group__0__Impl
	rule__StructMember__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getAnnotationsListAssignment_0()); }
(rule__StructMember__AnnotationsListAssignment_0)?
{ after(grammarAccess.getStructMemberAccess().getAnnotationsListAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructMember__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructMember__Group__1__Impl
	rule__StructMember__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getQualTypeAssignment_1()); }
(rule__StructMember__QualTypeAssignment_1)
{ after(grammarAccess.getStructMemberAccess().getQualTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructMember__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructMember__Group__2__Impl
	rule__StructMember__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getDecAssignment_2()); }
(rule__StructMember__DecAssignment_2)
{ after(grammarAccess.getStructMemberAccess().getDecAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructMember__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructMember__Group__3__Impl
	rule__StructMember__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getGroup_3()); }
(rule__StructMember__Group_3__0)?
{ after(grammarAccess.getStructMemberAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructMember__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructMember__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getStructMemberAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__StructMember__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructMember__Group_3__0__Impl
	rule__StructMember__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getColonKeyword_3_0()); }

	':' 

{ after(grammarAccess.getStructMemberAccess().getColonKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructMember__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructMember__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getConstExprAssignment_3_1()); }
(rule__StructMember__ConstExprAssignment_3_1)
{ after(grammarAccess.getStructMemberAccess().getConstExprAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDefinition__Group__0__Impl
	rule__EnumDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDefinitionAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumDefinitionAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDefinition__Group__1__Impl
	rule__EnumDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDefinitionAccess().getIdAssignment_1()); }
(rule__EnumDefinition__IdAssignment_1)?
{ after(grammarAccess.getEnumDefinitionAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDefinition__Group__2__Impl
	rule__EnumDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDefinitionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEnumDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDefinition__Group__3__Impl
	rule__EnumDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDefinitionAccess().getEnumMemberListAssignment_3()); }
(rule__EnumDefinition__EnumMemberListAssignment_3)
{ after(grammarAccess.getEnumDefinitionAccess().getEnumMemberListAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDefinitionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getEnumDefinitionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumReference__Group__0__Impl
	rule__EnumReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumReferenceAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumReferenceAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumReferenceAccess().getIdAssignment_1()); }
(rule__EnumReference__IdAssignment_1)
{ after(grammarAccess.getEnumReferenceAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumMemberList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumMemberList__Group__0__Impl
	rule__EnumMemberList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMemberList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMemberListAccess().getEnumMemberAssignment_0()); }
(rule__EnumMemberList__EnumMemberAssignment_0)
{ after(grammarAccess.getEnumMemberListAccess().getEnumMemberAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumMemberList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumMemberList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMemberList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMemberListAccess().getGroup_1()); }
(rule__EnumMemberList__Group_1__0)*
{ after(grammarAccess.getEnumMemberListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumMemberList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumMemberList__Group_1__0__Impl
	rule__EnumMemberList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMemberList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMemberListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getEnumMemberListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumMemberList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumMemberList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMemberList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMemberListAccess().getEnumMemberAssignment_1_1()); }
(rule__EnumMemberList__EnumMemberAssignment_1_1)
{ after(grammarAccess.getEnumMemberListAccess().getEnumMemberAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumMember__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumMember__Group__0__Impl
	rule__EnumMember__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMemberAccess().getNameAssignment_0()); }
(rule__EnumMember__NameAssignment_0)
{ after(grammarAccess.getEnumMemberAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumMember__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumMember__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMemberAccess().getGroup_1()); }
(rule__EnumMember__Group_1__0)?
{ after(grammarAccess.getEnumMemberAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumMember__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumMember__Group_1__0__Impl
	rule__EnumMember__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMemberAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getEnumMemberAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumMember__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumMember__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMemberAccess().getConstExprAssignment_1_1()); }
(rule__EnumMember__ConstExprAssignment_1_1)
{ after(grammarAccess.getEnumMemberAccess().getConstExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declarators__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarators__Group__0__Impl
	rule__Declarators__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarators__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorsAccess().getDecAssignment_0()); }
(rule__Declarators__DecAssignment_0)
{ after(grammarAccess.getDeclaratorsAccess().getDecAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarators__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarators__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarators__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorsAccess().getGroup_1()); }
(rule__Declarators__Group_1__0)*
{ after(grammarAccess.getDeclaratorsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declarators__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarators__Group_1__0__Impl
	rule__Declarators__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarators__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getDeclaratorsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarators__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarators__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarators__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorsAccess().getDeclaratorListAssignment_1_1()); }
(rule__Declarators__DeclaratorListAssignment_1_1)
{ after(grammarAccess.getDeclaratorsAccess().getDeclaratorListAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__0__Impl
	rule__Declarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getPointerAssignment_0()); }
(rule__Declarator__PointerAssignment_0)*
{ after(grammarAccess.getDeclaratorAccess().getPointerAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getAlternatives_1()); }
(rule__Declarator__Alternatives_1)
{ after(grammarAccess.getDeclaratorAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declarator__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group_1_2__0__Impl
	rule__Declarator__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getLeftParenthesisKeyword_1_2_0()); }

	'(' 

{ after(grammarAccess.getDeclaratorAccess().getLeftParenthesisKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group_1_2__1__Impl
	rule__Declarator__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDecAssignment_1_2_1()); }
(rule__Declarator__DecAssignment_1_2_1)
{ after(grammarAccess.getDeclaratorAccess().getDecAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getRightParenthesisKeyword_1_2_2()); }

	')' 

{ after(grammarAccess.getDeclaratorAccess().getRightParenthesisKeyword_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedPointerSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPointerSpecification__Group__0__Impl
	rule__QualifiedPointerSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPointerSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPointerSpecificationAccess().getQualifiedPointerSpecificationAction_0()); }
(

)
{ after(grammarAccess.getQualifiedPointerSpecificationAccess().getQualifiedPointerSpecificationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedPointerSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPointerSpecification__Group__1__Impl
	rule__QualifiedPointerSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPointerSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPointerSpecificationAccess().getAsteriskKeyword_1()); }

	'*' 

{ after(grammarAccess.getQualifiedPointerSpecificationAccess().getAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedPointerSpecification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPointerSpecification__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPointerSpecification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPointerSpecificationAccess().getTypeQualifiersAssignment_2()); }
(rule__QualifiedPointerSpecification__TypeQualifiersAssignment_2)*
{ after(grammarAccess.getQualifiedPointerSpecificationAccess().getTypeQualifiersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DirectNamedDeclarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectNamedDeclarator__Group__0__Impl
	rule__DirectNamedDeclarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectNamedDeclarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectNamedDeclaratorAccess().getIdAssignment_0()); }
(rule__DirectNamedDeclarator__IdAssignment_0)
{ after(grammarAccess.getDirectNamedDeclaratorAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DirectNamedDeclarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectNamedDeclarator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectNamedDeclarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectNamedDeclaratorAccess().getArrayAssignment_1()); }
(rule__DirectNamedDeclarator__ArrayAssignment_1)*
{ after(grammarAccess.getDirectNamedDeclaratorAccess().getArrayAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DirectAnonymousDeclarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectAnonymousDeclarator__Group__0__Impl
	rule__DirectAnonymousDeclarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectAnonymousDeclarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectAnonymousDeclaratorAccess().getDirectAnonymousDeclaratorAction_0()); }
(

)
{ after(grammarAccess.getDirectAnonymousDeclaratorAccess().getDirectAnonymousDeclaratorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DirectAnonymousDeclarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectAnonymousDeclarator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectAnonymousDeclarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectAnonymousDeclaratorAccess().getArrayAssignment_1()); }
(rule__DirectAnonymousDeclarator__ArrayAssignment_1)*
{ after(grammarAccess.getDirectAnonymousDeclaratorAccess().getArrayAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArraySpecification__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArraySpecification__Group_0__0__Impl
	rule__ArraySpecification__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecification__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySpecificationAccess().getUnspecifiedSizeAssignment_0_0()); }
(rule__ArraySpecification__UnspecifiedSizeAssignment_0_0)
{ after(grammarAccess.getArraySpecificationAccess().getUnspecifiedSizeAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArraySpecification__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArraySpecification__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecification__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySpecificationAccess().getRightSquareBracketKeyword_0_1()); }

	']' 

{ after(grammarAccess.getArraySpecificationAccess().getRightSquareBracketKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArraySpecification__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArraySpecification__Group_1__0__Impl
	rule__ArraySpecification__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecification__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySpecificationAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getArraySpecificationAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArraySpecification__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArraySpecification__Group_1__1__Impl
	rule__ArraySpecification__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecification__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySpecificationAccess().getFixedSizeAssignment_1_1()); }
(rule__ArraySpecification__FixedSizeAssignment_1_1)
{ after(grammarAccess.getArraySpecificationAccess().getFixedSizeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArraySpecification__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArraySpecification__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecification__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySpecificationAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getArraySpecificationAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstantDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDefinition__Group__0__Impl
	rule__ConstantDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionAccess().getDefineKeyword_0()); }

	'#define' 

{ after(grammarAccess.getConstantDefinitionAccess().getDefineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDefinition__Group__1__Impl
	rule__ConstantDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionAccess().getNameAssignment_1()); }
(rule__ConstantDefinition__NameAssignment_1)
{ after(grammarAccess.getConstantDefinitionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionAccess().getExprAssignment_2()); }
(rule__ConstantDefinition__ExprAssignment_2)?
{ after(grammarAccess.getConstantDefinitionAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InterfaceDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceDefinition__Group__0__Impl
	rule__InterfaceDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getAnnotationsListAssignment_0()); }
(rule__InterfaceDefinition__AnnotationsListAssignment_0)?
{ after(grammarAccess.getInterfaceDefinitionAccess().getAnnotationsListAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceDefinition__Group__1__Impl
	rule__InterfaceDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getInterfaceKeyword_1()); }

	'interface' 

{ after(grammarAccess.getInterfaceDefinitionAccess().getInterfaceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceDefinition__Group__2__Impl
	rule__InterfaceDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getUnmanagedKeyword_2()); }
(
	'unmanaged' 
)?
{ after(grammarAccess.getInterfaceDefinitionAccess().getUnmanagedKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceDefinition__Group__3__Impl
	rule__InterfaceDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getNameAssignment_3()); }
(rule__InterfaceDefinition__NameAssignment_3)
{ after(grammarAccess.getInterfaceDefinitionAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceDefinition__Group__4__Impl
	rule__InterfaceDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getGroup_4()); }
(rule__InterfaceDefinition__Group_4__0)?
{ after(grammarAccess.getInterfaceDefinitionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceDefinition__Group__5__Impl
	rule__InterfaceDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getLeftCurlyBracketKeyword_5()); }

	'{' 

{ after(grammarAccess.getInterfaceDefinitionAccess().getLeftCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceDefinition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceDefinition__Group__6__Impl
	rule__InterfaceDefinition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getMethodDefAssignment_6()); }
(rule__InterfaceDefinition__MethodDefAssignment_6)*
{ after(grammarAccess.getInterfaceDefinitionAccess().getMethodDefAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceDefinition__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceDefinition__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getInterfaceDefinitionAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__InterfaceDefinition__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceDefinition__Group_4__0__Impl
	rule__InterfaceDefinition__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getColonKeyword_4_0()); }

	':' 

{ after(grammarAccess.getInterfaceDefinitionAccess().getColonKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceDefinition__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceDefinition__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getFqn2Assignment_4_1()); }
(rule__InterfaceDefinition__Fqn2Assignment_4_1)
{ after(grammarAccess.getInterfaceDefinitionAccess().getFqn2Assignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDefinition__Group__0__Impl
	rule__MethodDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getAnnotationsListAssignment_0()); }
(rule__MethodDefinition__AnnotationsListAssignment_0)?
{ after(grammarAccess.getMethodDefinitionAccess().getAnnotationsListAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDefinition__Group__1__Impl
	rule__MethodDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getQualifiedTypeSpecAssignment_1()); }
(rule__MethodDefinition__QualifiedTypeSpecAssignment_1)
{ after(grammarAccess.getMethodDefinitionAccess().getQualifiedTypeSpecAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDefinition__Group__2__Impl
	rule__MethodDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getPointerSpecificationAssignment_2()); }
(rule__MethodDefinition__PointerSpecificationAssignment_2)*
{ after(grammarAccess.getMethodDefinitionAccess().getPointerSpecificationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDefinition__Group__3__Impl
	rule__MethodDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getNameAssignment_3()); }
(rule__MethodDefinition__NameAssignment_3)
{ after(grammarAccess.getMethodDefinitionAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDefinition__Group__4__Impl
	rule__MethodDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getAlternatives_4()); }
(rule__MethodDefinition__Alternatives_4)
{ after(grammarAccess.getMethodDefinitionAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getMethodDefinitionAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__MethodDefinition__Group_4_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDefinition__Group_4_0__0__Impl
	rule__MethodDefinition__Group_4_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Group_4_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getLeftParenthesisKeyword_4_0_0()); }

	'(' 

{ after(grammarAccess.getMethodDefinitionAccess().getLeftParenthesisKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDefinition__Group_4_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDefinition__Group_4_0__1__Impl
	rule__MethodDefinition__Group_4_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Group_4_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getVoidKeyword_4_0_1()); }
(
	'void' 
)?
{ after(grammarAccess.getMethodDefinitionAccess().getVoidKeyword_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDefinition__Group_4_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDefinition__Group_4_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Group_4_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getRightParenthesisKeyword_4_0_2()); }

	')' 

{ after(grammarAccess.getMethodDefinitionAccess().getRightParenthesisKeyword_4_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MethodDefinition__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDefinition__Group_4_1__0__Impl
	rule__MethodDefinition__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getLeftParenthesisKeyword_4_1_0()); }

	'(' 

{ after(grammarAccess.getMethodDefinitionAccess().getLeftParenthesisKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDefinition__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDefinition__Group_4_1__1__Impl
	rule__MethodDefinition__Group_4_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getParameterListAssignment_4_1_1()); }
(rule__MethodDefinition__ParameterListAssignment_4_1_1)
{ after(grammarAccess.getMethodDefinitionAccess().getParameterListAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDefinition__Group_4_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDefinition__Group_4_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__Group_4_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getRightParenthesisKeyword_4_1_2()); }

	')' 

{ after(grammarAccess.getMethodDefinitionAccess().getRightParenthesisKeyword_4_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParameterList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParamsAssignment_0()); }
(rule__ParameterList__ParamsAssignment_0)
{ after(grammarAccess.getParameterListAccess().getParamsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__1__Impl
	rule__ParameterList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getGroup_1()); }
(rule__ParameterList__Group_1__0)*
{ after(grammarAccess.getParameterListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getGroup_2()); }
(rule__ParameterList__Group_2__0)?
{ after(grammarAccess.getParameterListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParameterList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_1__0__Impl
	rule__ParameterList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParamsAssignment_1_1()); }
(rule__ParameterList__ParamsAssignment_1_1)
{ after(grammarAccess.getParameterListAccess().getParamsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_2__0__Impl
	rule__ParameterList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getParameterListAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getFullStopFullStopFullStopKeyword_2_1()); }

	'...' 

{ after(grammarAccess.getParameterListAccess().getFullStopFullStopFullStopKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getAnnotationsListAssignment_0()); }
(rule__Parameter__AnnotationsListAssignment_0)?
{ after(grammarAccess.getParameterAccess().getAnnotationsListAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getParameterQualifierAssignment_1()); }
(rule__Parameter__ParameterQualifierAssignment_1)*
{ after(grammarAccess.getParameterAccess().getParameterQualifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
	rule__Parameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getQualifiedTypeSpecAssignment_2()); }
(rule__Parameter__QualifiedTypeSpecAssignment_2)
{ after(grammarAccess.getParameterAccess().getQualifiedTypeSpecAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getDecAssignment_3()); }
(rule__Parameter__DecAssignment_3)
{ after(grammarAccess.getParameterAccess().getDecAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IncludeDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group__0__Impl
	rule__IncludeDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getIncludeKeyword_0()); }

	'#include' 

{ after(grammarAccess.getIncludeDirectiveAccess().getIncludeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getAlternatives_1()); }
(rule__IncludeDirective__Alternatives_1)
{ after(grammarAccess.getIncludeDirectiveAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IncludeDirective__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group_1_0__0__Impl
	rule__IncludeDirective__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getImportedURIAssignment_1_0_0()); }
(rule__IncludeDirective__ImportedURIAssignment_1_0_0)
{ after(grammarAccess.getIncludeDirectiveAccess().getImportedURIAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDirective__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getGroup_1_0_1()); }
(rule__IncludeDirective__Group_1_0_1__0)*
{ after(grammarAccess.getIncludeDirectiveAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IncludeDirective__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group_1_0_1__0__Impl
	rule__IncludeDirective__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getSolidusKeyword_1_0_1_0()); }

	'/' 

{ after(grammarAccess.getIncludeDirectiveAccess().getSolidusKeyword_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDirective__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDirective__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getSTRINGTerminalRuleCall_1_0_1_1()); }
	RULE_STRING
{ after(grammarAccess.getIncludeDirectiveAccess().getSTRINGTerminalRuleCall_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnnotationsList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationsList__Group__0__Impl
	rule__AnnotationsList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationsList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationsListAccess().getAnnotationsAssignment_0()); }
(rule__AnnotationsList__AnnotationsAssignment_0)
{ after(grammarAccess.getAnnotationsListAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationsList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationsList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationsList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationsListAccess().getAnnotationsAssignment_1()); }
(rule__AnnotationsList__AnnotationsAssignment_1)*
{ after(grammarAccess.getAnnotationsListAccess().getAnnotationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Annotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__0__Impl
	rule__Annotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__1__Impl
	rule__Annotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getNameAssignment_1()); }
(rule__Annotation__NameAssignment_1)
{ after(grammarAccess.getAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_2()); }
(rule__Annotation__Group_2__0)?
{ after(grammarAccess.getAnnotationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Annotation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__0__Impl
	rule__Annotation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__1__Impl
	rule__Annotation__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAnnotationParametersListAssignment_2_1()); }
(rule__Annotation__AnnotationParametersListAssignment_2_1)
{ after(grammarAccess.getAnnotationAccess().getAnnotationParametersListAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__2__Impl
	rule__Annotation__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_2_2()); }
(rule__Annotation__Group_2_2__0)*
{ after(grammarAccess.getAnnotationAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3()); }

	')' 

{ after(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Annotation__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2_2__0__Impl
	rule__Annotation__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAnnotationParametersListAssignment_2_2_1()); }
(rule__Annotation__AnnotationParametersListAssignment_2_2_1)
{ after(grammarAccess.getAnnotationAccess().getAnnotationParametersListAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnnotationValuePair__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationValuePair__Group__0__Impl
	rule__AnnotationValuePair__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationValuePair__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationValuePairAccess().getGroup_0()); }
(rule__AnnotationValuePair__Group_0__0)?
{ after(grammarAccess.getAnnotationValuePairAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationValuePair__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationValuePair__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationValuePair__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationValuePairAccess().getValueAssignment_1()); }
(rule__AnnotationValuePair__ValueAssignment_1)
{ after(grammarAccess.getAnnotationValuePairAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnnotationValuePair__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationValuePair__Group_0__0__Impl
	rule__AnnotationValuePair__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationValuePair__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationValuePairAccess().getNameAssignment_0_0()); }
(rule__AnnotationValuePair__NameAssignment_0_0)
{ after(grammarAccess.getAnnotationValuePairAccess().getNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationValuePair__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationValuePair__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationValuePair__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationValuePairAccess().getEqualsSignKeyword_0_1()); }

	'=' 

{ after(grammarAccess.getAnnotationValuePairAccess().getEqualsSignKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayAnnotationValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAnnotationValue__Group__0__Impl
	rule__ArrayAnnotationValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAnnotationValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAnnotationValueAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getArrayAnnotationValueAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayAnnotationValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAnnotationValue__Group__1__Impl
	rule__ArrayAnnotationValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAnnotationValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAnnotationValueAccess().getValuesAssignment_1()); }
(rule__ArrayAnnotationValue__ValuesAssignment_1)
{ after(grammarAccess.getArrayAnnotationValueAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayAnnotationValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAnnotationValue__Group__2__Impl
	rule__ArrayAnnotationValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAnnotationValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAnnotationValueAccess().getGroup_2()); }
(rule__ArrayAnnotationValue__Group_2__0)*
{ after(grammarAccess.getArrayAnnotationValueAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayAnnotationValue__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAnnotationValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAnnotationValue__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAnnotationValueAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getArrayAnnotationValueAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArrayAnnotationValue__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAnnotationValue__Group_2__0__Impl
	rule__ArrayAnnotationValue__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAnnotationValue__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAnnotationValueAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getArrayAnnotationValueAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayAnnotationValue__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAnnotationValue__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAnnotationValue__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAnnotationValueAccess().getValuesAssignment_2_1()); }
(rule__ArrayAnnotationValue__ValuesAssignment_2_1)
{ after(grammarAccess.getArrayAnnotationValueAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignedINT__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedINT__Group__0__Impl
	rule__SignedINT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedINT__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedINTAccess().getADDITIVE_OPERATIONTerminalRuleCall_0()); }
(	RULE_ADDITIVE_OPERATION)?
{ after(grammarAccess.getSignedINTAccess().getADDITIVE_OPERATIONTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedINT__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedINT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedINT__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedINTAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getSignedINTAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLeftExprAssignment_0()); }
(rule__LogicalOrExpression__LeftExprAssignment_0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLeftExprAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
(rule__LogicalOrExpression__Group_1__0)?
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__0__Impl
	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0()); }

	'||' 

{ after(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightExprAssignment_1_1()); }
(rule__LogicalOrExpression__RightExprAssignment_1_1)
{ after(grammarAccess.getLogicalOrExpressionAccess().getRightExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLeftExprAssignment_0()); }
(rule__LogicalAndExpression__LeftExprAssignment_0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getLeftExprAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
(rule__LogicalAndExpression__Group_1__0)?
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__0__Impl
	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_0()); }

	'&&' 

{ after(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightExprAssignment_1_1()); }
(rule__LogicalAndExpression__RightExprAssignment_1_1)
{ after(grammarAccess.getLogicalAndExpressionAccess().getRightExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getLeftExprAssignment_0()); }
(rule__OrExpression__LeftExprAssignment_0)
{ after(grammarAccess.getOrExpressionAccess().getLeftExprAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)?
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getVerticalLineKeyword_1_0()); }

	'|' 

{ after(grammarAccess.getOrExpressionAccess().getVerticalLineKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightExprAssignment_1_1()); }
(rule__OrExpression__RightExprAssignment_1_1)
{ after(grammarAccess.getOrExpressionAccess().getRightExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpression__Group__0__Impl
	rule__XorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExpressionAccess().getLeftExprAssignment_0()); }
(rule__XorExpression__LeftExprAssignment_0)
{ after(grammarAccess.getXorExpressionAccess().getLeftExprAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExpressionAccess().getGroup_1()); }
(rule__XorExpression__Group_1__0)?
{ after(grammarAccess.getXorExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XorExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpression__Group_1__0__Impl
	rule__XorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExpressionAccess().getCircumflexAccentKeyword_1_0()); }

	'^' 

{ after(grammarAccess.getXorExpressionAccess().getCircumflexAccentKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExpressionAccess().getRightExprAssignment_1_1()); }
(rule__XorExpression__RightExprAssignment_1_1)
{ after(grammarAccess.getXorExpressionAccess().getRightExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getLeftExprAssignment_0()); }
(rule__AndExpression__LeftExprAssignment_0)
{ after(grammarAccess.getAndExpressionAccess().getLeftExprAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)?
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAmpersandKeyword_1_0()); }

	'&' 

{ after(grammarAccess.getAndExpressionAccess().getAmpersandKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightExprAssignment_1_1()); }
(rule__AndExpression__RightExprAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getRightExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__0__Impl
	rule__ShiftExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getLeftExprAssignment_0()); }
(rule__ShiftExpression__LeftExprAssignment_0)
{ after(grammarAccess.getShiftExpressionAccess().getLeftExprAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
(rule__ShiftExpression__Group_1__0)?
{ after(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_1__0__Impl
	rule__ShiftExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0()); }
(rule__ShiftExpression__OpAssignment_1_0)
{ after(grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getRightExprAssignment_1_1()); }
(rule__ShiftExpression__RightExprAssignment_1_1)
{ after(grammarAccess.getShiftExpressionAccess().getRightExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getLeftExprAssignment_0()); }
(rule__AdditiveExpression__LeftExprAssignment_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getLeftExprAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)?
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_0()); }
(rule__AdditiveExpression__OpAssignment_1_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightExprAssignment_1_1()); }
(rule__AdditiveExpression__RightExprAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getRightExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MulExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MulExpression__Group__0__Impl
	rule__MulExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulExpressionAccess().getLeftExprAssignment_0()); }
(rule__MulExpression__LeftExprAssignment_0)
{ after(grammarAccess.getMulExpressionAccess().getLeftExprAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MulExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MulExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulExpressionAccess().getGroup_1()); }
(rule__MulExpression__Group_1__0)?
{ after(grammarAccess.getMulExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MulExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MulExpression__Group_1__0__Impl
	rule__MulExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulExpressionAccess().getOpAssignment_1_0()); }
(rule__MulExpression__OpAssignment_1_0)
{ after(grammarAccess.getMulExpressionAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MulExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MulExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulExpressionAccess().getRightExprAssignment_1_1()); }
(rule__MulExpression__RightExprAssignment_1_1)
{ after(grammarAccess.getMulExpressionAccess().getRightExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CastExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpression__Group_0__0__Impl
	rule__CastExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExpressionAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getCastExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpression__Group_0__1__Impl
	rule__CastExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExpressionAccess().getTypeAssignment_0_1()); }
(rule__CastExpression__TypeAssignment_0_1)
{ after(grammarAccess.getCastExpressionAccess().getTypeAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpression__Group_0__2__Impl
	rule__CastExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExpressionAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getCastExpressionAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpression__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpression__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExpressionAccess().getExprAssignment_0_3()); }
(rule__CastExpression__ExprAssignment_0_3)
{ after(grammarAccess.getCastExpressionAccess().getExprAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExprAssignment_0()); }
(rule__UnaryExpression__UnaryExprAssignment_0)?
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExprAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getPrimaryExprAssignment_1()); }
(rule__UnaryExpression__PrimaryExprAssignment_1)
{ after(grammarAccess.getUnaryExpressionAccess().getPrimaryExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__1__Impl
	rule__PrimaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getConstantExpressionParserRuleCall_1_1()); }
	ruleConstantExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getConstantExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FloatingPointLiteral__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_0__0__Impl
	rule__FloatingPointLiteral__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_0_0()); }
(	rulesignedINT)
{ after(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_0_0()); }
)
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_0_0()); }
(	rulesignedINT)*
{ after(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_0_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatingPointLiteral__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_0__1__Impl
	rule__FloatingPointLiteral__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getFullStopKeyword_0_1()); }

	'.' 

{ after(grammarAccess.getFloatingPointLiteralAccess().getFullStopKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatingPointLiteral__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_0__2__Impl
	rule__FloatingPointLiteral__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_0_2()); }
(	rulesignedINT)*
{ after(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatingPointLiteral__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_0__3__Impl
	rule__FloatingPointLiteral__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getExponentParserRuleCall_0_3()); }
(	ruleExponent)?
{ after(grammarAccess.getFloatingPointLiteralAccess().getExponentParserRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatingPointLiteral__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getFDSYMBOLTerminalRuleCall_0_4()); }
(	RULE_FDSYMBOL)?
{ after(grammarAccess.getFloatingPointLiteralAccess().getFDSYMBOLTerminalRuleCall_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FloatingPointLiteral__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_1__0__Impl
	rule__FloatingPointLiteral__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getFloatingPointLiteralAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatingPointLiteral__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_1__1__Impl
	rule__FloatingPointLiteral__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_1_1()); }
(	rulesignedINT)
{ after(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_1_1()); }
)
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_1_1()); }
(	rulesignedINT)*
{ after(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatingPointLiteral__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_1__2__Impl
	rule__FloatingPointLiteral__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getExponentParserRuleCall_1_2()); }
(	ruleExponent)?
{ after(grammarAccess.getFloatingPointLiteralAccess().getExponentParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatingPointLiteral__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getFDSYMBOLTerminalRuleCall_1_3()); }
(	RULE_FDSYMBOL)?
{ after(grammarAccess.getFloatingPointLiteralAccess().getFDSYMBOLTerminalRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FloatingPointLiteral__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_2__0__Impl
	rule__FloatingPointLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_2_0()); }
(	rulesignedINT)
{ after(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_2_0()); }
)
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_2_0()); }
(	rulesignedINT)*
{ after(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_2_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatingPointLiteral__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_2__1__Impl
	rule__FloatingPointLiteral__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getExponentParserRuleCall_2_1()); }
	ruleExponent
{ after(grammarAccess.getFloatingPointLiteralAccess().getExponentParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatingPointLiteral__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getFDSYMBOLTerminalRuleCall_2_2()); }
(	RULE_FDSYMBOL)?
{ after(grammarAccess.getFloatingPointLiteralAccess().getFDSYMBOLTerminalRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FloatingPointLiteral__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_3__0__Impl
	rule__FloatingPointLiteral__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_3_0()); }
(	rulesignedINT)
{ after(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_3_0()); }
)
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_3_0()); }
(	rulesignedINT)*
{ after(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_3_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatingPointLiteral__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_3__1__Impl
	rule__FloatingPointLiteral__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getExponentParserRuleCall_3_1()); }
(	ruleExponent)?
{ after(grammarAccess.getFloatingPointLiteralAccess().getExponentParserRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatingPointLiteral__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatingPointLiteral__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getFDSYMBOLTerminalRuleCall_3_2()); }
(	RULE_FDSYMBOL)?
{ after(grammarAccess.getFloatingPointLiteralAccess().getFDSYMBOLTerminalRuleCall_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Exponent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exponent__Group__0__Impl
	rule__Exponent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentAccess().getAlternatives_0()); }
(rule__Exponent__Alternatives_0)?
{ after(grammarAccess.getExponentAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exponent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exponent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getExponentAccess().getINTTerminalRuleCall_1()); }
(	RULE_INT)
{ after(grammarAccess.getExponentAccess().getINTTerminalRuleCall_1()); }
)
(
{ before(grammarAccess.getExponentAccess().getINTTerminalRuleCall_1()); }
(	RULE_INT)*
{ after(grammarAccess.getExponentAccess().getINTTerminalRuleCall_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Exponent__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exponent__Group_0_1__0__Impl
	rule__Exponent__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentAccess().getEKeyword_0_1_0()); }

	'E' 

{ after(grammarAccess.getExponentAccess().getEKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exponent__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exponent__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExponentAccess().getADDITIVE_OPERATIONTerminalRuleCall_0_1_1()); }
	RULE_ADDITIVE_OPERATION
{ after(grammarAccess.getExponentAccess().getADDITIVE_OPERATIONTerminalRuleCall_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__IdtFile__BegindefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getBegindefConstantDefinitionBeginParserRuleCall_0_0()); }
	ruleConstantDefinitionBegin{ after(grammarAccess.getIdtFileAccess().getBegindefConstantDefinitionBeginParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__DefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getDefConstantDefinitionParserRuleCall_1_0()); }
	ruleConstantDefinition{ after(grammarAccess.getIdtFileAccess().getDefConstantDefinitionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__IncludesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getIncludesIncludeDirectiveParserRuleCall_2_0()); }
	ruleIncludeDirective{ after(grammarAccess.getIdtFileAccess().getIncludesIncludeDirectiveParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__ConstantAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getConstantConstantDefinitionParserRuleCall_3_0_0()); }
	ruleConstantDefinition{ after(grammarAccess.getIdtFileAccess().getConstantConstantDefinitionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__TypeAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getTypeTypeDefinitionParserRuleCall_3_1_0()); }
	ruleTypeDefinition{ after(grammarAccess.getIdtFileAccess().getTypeTypeDefinitionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdtFile__EndDefAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdtFileAccess().getEndDefConstantDefinitionEndParserRuleCall_4_0()); }
	ruleConstantDefinitionEnd{ after(grammarAccess.getIdtFileAccess().getEndDefConstantDefinitionEndParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionBegin__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionBeginAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConstantDefinitionBeginAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__TypedefSpecification__QualifedTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedefSpecificationAccess().getQualifedTypeQualifiedTypeSpecificationParserRuleCall_1_0()); }
	ruleQualifiedTypeSpecification{ after(grammarAccess.getTypedefSpecificationAccess().getQualifedTypeQualifiedTypeSpecificationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedefSpecification__DecAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedefSpecificationAccess().getDecDeclaratorsParserRuleCall_2_0()); }
	ruleDeclarators{ after(grammarAccess.getTypedefSpecificationAccess().getDecDeclaratorsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedTypeSpecification__TypeQualifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedTypeSpecificationAccess().getTypeQualifierTypeQualifierEnumRuleCall_0_0()); }
	ruleTypeQualifier{ after(grammarAccess.getQualifiedTypeSpecificationAccess().getTypeQualifierTypeQualifierEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedTypeSpecification__TypeSpecAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedTypeSpecificationAccess().getTypeSpecTypeSpecificationParserRuleCall_1_0()); }
	ruleTypeSpecification{ after(grammarAccess.getQualifiedTypeSpecificationAccess().getTypeSpecTypeSpecificationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecification__TypeDefNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecificationAccess().getTypeDefNameQualifiedNameParserRuleCall_0_0()); }
	ruleQualifiedName{ after(grammarAccess.getTypeSpecificationAccess().getTypeDefNameQualifiedNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecification__TypeSpecifierAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecificationAccess().getTypeSpecifierTypeSpecifierEnumRuleCall_3_0_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getTypeSpecificationAccess().getTypeSpecifierTypeSpecifierEnumRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecification__TypeSpecifierAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecificationAccess().getTypeSpecifierTypeSpecifierEnumRuleCall_3_1_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getTypeSpecificationAccess().getTypeSpecifierTypeSpecifierEnumRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionDefinition__StructAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionDefinitionAccess().getStructStructOrUnionParserRuleCall_0_0()); }
	ruleStructOrUnion{ after(grammarAccess.getStructOrUnionDefinitionAccess().getStructStructOrUnionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionDefinition__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionDefinitionAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getStructOrUnionDefinitionAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructOrUnionDefinition__StructMemberAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructOrUnionDefinitionAccess().getStructMemberStructMemberParserRuleCall_3_0()); }
	ruleStructMember{ after(grammarAccess.getStructOrUnionDefinitionAccess().getStructMemberStructMemberParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructorUnionReference__StructAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructorUnionReferenceAccess().getStructStructOrUnionParserRuleCall_0_0()); }
	ruleStructOrUnion{ after(grammarAccess.getStructorUnionReferenceAccess().getStructStructOrUnionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructorUnionReference__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructorUnionReferenceAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getStructorUnionReferenceAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__AnnotationsListAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getAnnotationsListAnnotationsListParserRuleCall_0_0()); }
	ruleAnnotationsList{ after(grammarAccess.getStructMemberAccess().getAnnotationsListAnnotationsListParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__QualTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getQualTypeQualifiedTypeSpecificationParserRuleCall_1_0()); }
	ruleQualifiedTypeSpecification{ after(grammarAccess.getStructMemberAccess().getQualTypeQualifiedTypeSpecificationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__DecAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getDecDeclaratorsParserRuleCall_2_0()); }
	ruleDeclarators{ after(grammarAccess.getStructMemberAccess().getDecDeclaratorsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__ConstExprAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getConstExprConstantExpressionParserRuleCall_3_1_0()); }
	ruleConstantExpression{ after(grammarAccess.getStructMemberAccess().getConstExprConstantExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDefinitionAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumDefinitionAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDefinition__EnumMemberListAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDefinitionAccess().getEnumMemberListEnumMemberListParserRuleCall_3_0()); }
	ruleEnumMemberList{ after(grammarAccess.getEnumDefinitionAccess().getEnumMemberListEnumMemberListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumReference__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumReferenceAccess().getIdIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumReferenceAccess().getIdIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMemberList__EnumMemberAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMemberListAccess().getEnumMemberEnumMemberParserRuleCall_0_0()); }
	ruleEnumMember{ after(grammarAccess.getEnumMemberListAccess().getEnumMemberEnumMemberParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMemberList__EnumMemberAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMemberListAccess().getEnumMemberEnumMemberParserRuleCall_1_1_0()); }
	ruleEnumMember{ after(grammarAccess.getEnumMemberListAccess().getEnumMemberEnumMemberParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMemberAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getEnumMemberAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__ConstExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMemberAccess().getConstExprConstantExpressionParserRuleCall_1_1_0()); }
	ruleConstantExpression{ after(grammarAccess.getEnumMemberAccess().getConstExprConstantExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarators__DecAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorsAccess().getDecDeclaratorParserRuleCall_0_0()); }
	ruleDeclarator{ after(grammarAccess.getDeclaratorsAccess().getDecDeclaratorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarators__DeclaratorListAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorsAccess().getDeclaratorListDeclaratorParserRuleCall_1_1_0()); }
	ruleDeclarator{ after(grammarAccess.getDeclaratorsAccess().getDeclaratorListDeclaratorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__PointerAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getPointerQualifiedPointerSpecificationParserRuleCall_0_0()); }
	ruleQualifiedPointerSpecification{ after(grammarAccess.getDeclaratorAccess().getPointerQualifiedPointerSpecificationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__DcAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDcDirectNamedDeclaratorParserRuleCall_1_0_0()); }
	ruleDirectNamedDeclarator{ after(grammarAccess.getDeclaratorAccess().getDcDirectNamedDeclaratorParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__DcAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDcDirectAnonymousDeclaratorParserRuleCall_1_1_0()); }
	ruleDirectAnonymousDeclarator{ after(grammarAccess.getDeclaratorAccess().getDcDirectAnonymousDeclaratorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__DecAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDecDeclaratorParserRuleCall_1_2_1_0()); }
	ruleDeclarator{ after(grammarAccess.getDeclaratorAccess().getDecDeclaratorParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPointerSpecification__TypeQualifiersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPointerSpecificationAccess().getTypeQualifiersTypeQualifierEnumRuleCall_2_0()); }
	ruleTypeQualifier{ after(grammarAccess.getQualifiedPointerSpecificationAccess().getTypeQualifiersTypeQualifierEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DirectNamedDeclarator__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectNamedDeclaratorAccess().getIdIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getDirectNamedDeclaratorAccess().getIdIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DirectNamedDeclarator__ArrayAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectNamedDeclaratorAccess().getArrayArraySpecificationParserRuleCall_1_0()); }
	ruleArraySpecification{ after(grammarAccess.getDirectNamedDeclaratorAccess().getArrayArraySpecificationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DirectAnonymousDeclarator__ArrayAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectAnonymousDeclaratorAccess().getArrayArraySpecificationParserRuleCall_1_0()); }
	ruleArraySpecification{ after(grammarAccess.getDirectAnonymousDeclaratorAccess().getArrayArraySpecificationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecification__UnspecifiedSizeAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySpecificationAccess().getUnspecifiedSizeLeftSquareBracketKeyword_0_0_0()); }
(
{ before(grammarAccess.getArraySpecificationAccess().getUnspecifiedSizeLeftSquareBracketKeyword_0_0_0()); }

	'[' 

{ after(grammarAccess.getArraySpecificationAccess().getUnspecifiedSizeLeftSquareBracketKeyword_0_0_0()); }
)

{ after(grammarAccess.getArraySpecificationAccess().getUnspecifiedSizeLeftSquareBracketKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySpecification__FixedSizeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySpecificationAccess().getFixedSizeConstantExpressionParserRuleCall_1_1_0()); }
	ruleConstantExpression{ after(grammarAccess.getArraySpecificationAccess().getFixedSizeConstantExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConstantDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDefinitionAccess().getExprConstantExpressionParserRuleCall_2_0()); }
	ruleConstantExpression{ after(grammarAccess.getConstantDefinitionAccess().getExprConstantExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__AnnotationsListAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getAnnotationsListAnnotationsListParserRuleCall_0_0()); }
	ruleAnnotationsList{ after(grammarAccess.getInterfaceDefinitionAccess().getAnnotationsListAnnotationsListParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getNameQualifiedNameParserRuleCall_3_0()); }
	ruleQualifiedName{ after(grammarAccess.getInterfaceDefinitionAccess().getNameQualifiedNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__Fqn2Assignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getFqn2InterfaceDefinitionCrossReference_4_1_0()); }
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getFqn2InterfaceDefinitionQualifiedNameParserRuleCall_4_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getInterfaceDefinitionAccess().getFqn2InterfaceDefinitionQualifiedNameParserRuleCall_4_1_0_1()); }
)
{ after(grammarAccess.getInterfaceDefinitionAccess().getFqn2InterfaceDefinitionCrossReference_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDefinition__MethodDefAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDefinitionAccess().getMethodDefMethodDefinitionParserRuleCall_6_0()); }
	ruleMethodDefinition{ after(grammarAccess.getInterfaceDefinitionAccess().getMethodDefMethodDefinitionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__AnnotationsListAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getAnnotationsListAnnotationsListParserRuleCall_0_0()); }
	ruleAnnotationsList{ after(grammarAccess.getMethodDefinitionAccess().getAnnotationsListAnnotationsListParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__QualifiedTypeSpecAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_1_0()); }
	ruleQualifiedTypeSpecification{ after(grammarAccess.getMethodDefinitionAccess().getQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__PointerSpecificationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getPointerSpecificationQualifiedPointerSpecificationParserRuleCall_2_0()); }
	ruleQualifiedPointerSpecification{ after(grammarAccess.getMethodDefinitionAccess().getPointerSpecificationQualifiedPointerSpecificationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getMethodDefinitionAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDefinition__ParameterListAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDefinitionAccess().getParameterListParameterListParserRuleCall_4_1_1_0()); }
	ruleParameterList{ after(grammarAccess.getMethodDefinitionAccess().getParameterListParameterListParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParamsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParamsParameterParserRuleCall_0_0()); }
	ruleParameter{ after(grammarAccess.getParameterListAccess().getParamsParameterParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParamsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParamsParameterParserRuleCall_1_1_0()); }
	ruleParameter{ after(grammarAccess.getParameterListAccess().getParamsParameterParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__AnnotationsListAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getAnnotationsListAnnotationsListParserRuleCall_0_0()); }
	ruleAnnotationsList{ after(grammarAccess.getParameterAccess().getAnnotationsListAnnotationsListParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ParameterQualifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getParameterQualifierParameterQualifierEnumRuleCall_1_0()); }
	ruleParameterQualifier{ after(grammarAccess.getParameterAccess().getParameterQualifierParameterQualifierEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__QualifiedTypeSpecAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_2_0()); }
	ruleQualifiedTypeSpecification{ after(grammarAccess.getParameterAccess().getQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__DecAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getDecDeclaratorParserRuleCall_3_0()); }
	ruleDeclarator{ after(grammarAccess.getParameterAccess().getDecDeclaratorParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__ImportedURIAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getImportedURISTRINGTerminalRuleCall_1_0_0_0()); }
	RULE_STRING{ after(grammarAccess.getIncludeDirectiveAccess().getImportedURISTRINGTerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDirective__IncludeIDAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDirectiveAccess().getIncludeIDINCLUDE_LIBTerminalRuleCall_1_1_0()); }
	RULE_INCLUDE_LIB{ after(grammarAccess.getIncludeDirectiveAccess().getIncludeIDINCLUDE_LIBTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationsList__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationsListAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
	ruleAnnotation{ after(grammarAccess.getAnnotationsListAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationsList__AnnotationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationsListAccess().getAnnotationsAnnotationParserRuleCall_1_0()); }
	ruleAnnotation{ after(grammarAccess.getAnnotationsListAccess().getAnnotationsAnnotationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getAnnotationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__AnnotationParametersListAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAnnotationParametersListAnnotationValuePairParserRuleCall_2_1_0()); }
	ruleAnnotationValuePair{ after(grammarAccess.getAnnotationAccess().getAnnotationParametersListAnnotationValuePairParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__AnnotationParametersListAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAnnotationParametersListAnnotationValuePairParserRuleCall_2_2_1_0()); }
	ruleAnnotationValuePair{ after(grammarAccess.getAnnotationAccess().getAnnotationParametersListAnnotationValuePairParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationValuePair__NameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationValuePairAccess().getNameIDTerminalRuleCall_0_0_0()); }
	RULE_ID{ after(grammarAccess.getAnnotationValuePairAccess().getNameIDTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationValuePair__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationValuePairAccess().getValueAnnotationValueParserRuleCall_1_0()); }
	ruleAnnotationValue{ after(grammarAccess.getAnnotationValuePairAccess().getValueAnnotationValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationValue__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationValueAccess().getValueAlternatives_0_0()); }
(rule__AnnotationValue__ValueAlternatives_0_0)
{ after(grammarAccess.getAnnotationValueAccess().getValueAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationValue__ArrayValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationValueAccess().getArrayValueArrayAnnotationValueParserRuleCall_1_0()); }
	ruleArrayAnnotationValue{ after(grammarAccess.getAnnotationValueAccess().getArrayValueArrayAnnotationValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAnnotationValue__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAnnotationValueAccess().getValuesAnnotationValueParserRuleCall_1_0()); }
	ruleAnnotationValue{ after(grammarAccess.getArrayAnnotationValueAccess().getValuesAnnotationValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAnnotationValue__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAnnotationValueAccess().getValuesAnnotationValueParserRuleCall_2_1_0()); }
	ruleAnnotationValue{ after(grammarAccess.getArrayAnnotationValueAccess().getValuesAnnotationValueParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__LeftExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLeftExprLogicalAndExpressionParserRuleCall_0_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getLeftExprLogicalAndExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__RightExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightExprLogicalOrExpressionParserRuleCall_1_1_0()); }
	ruleLogicalOrExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getRightExprLogicalOrExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__LeftExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLeftExprOrExpressionParserRuleCall_0_0()); }
	ruleOrExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getLeftExprOrExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__RightExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightExprLogicalAndExpressionParserRuleCall_1_1_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getRightExprLogicalAndExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__LeftExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getLeftExprXorExpressionParserRuleCall_0_0()); }
	ruleXorExpression{ after(grammarAccess.getOrExpressionAccess().getLeftExprXorExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightExprOrExpressionParserRuleCall_1_1_0()); }
	ruleOrExpression{ after(grammarAccess.getOrExpressionAccess().getRightExprOrExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__LeftExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExpressionAccess().getLeftExprAndExpressionParserRuleCall_0_0()); }
	ruleAndExpression{ after(grammarAccess.getXorExpressionAccess().getLeftExprAndExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__RightExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExpressionAccess().getRightExprXorExpressionParserRuleCall_1_1_0()); }
	ruleXorExpression{ after(grammarAccess.getXorExpressionAccess().getRightExprXorExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__LeftExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getLeftExprShiftExpressionParserRuleCall_0_0()); }
	ruleShiftExpression{ after(grammarAccess.getAndExpressionAccess().getLeftExprShiftExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightExprAndExpressionParserRuleCall_1_1_0()); }
	ruleAndExpression{ after(grammarAccess.getAndExpressionAccess().getRightExprAndExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__LeftExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getLeftExprAdditiveExpressionParserRuleCall_0_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getShiftExpressionAccess().getLeftExprAdditiveExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOpSHIFT_OPERATIONTerminalRuleCall_1_0_0()); }
	RULE_SHIFT_OPERATION{ after(grammarAccess.getShiftExpressionAccess().getOpSHIFT_OPERATIONTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__RightExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getRightExprShiftExpressionParserRuleCall_1_1_0()); }
	ruleShiftExpression{ after(grammarAccess.getShiftExpressionAccess().getRightExprShiftExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__LeftExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getLeftExprMulExpressionParserRuleCall_0_0()); }
	ruleMulExpression{ after(grammarAccess.getAdditiveExpressionAccess().getLeftExprMulExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpADDITIVE_OPERATIONTerminalRuleCall_1_0_0()); }
	RULE_ADDITIVE_OPERATION{ after(grammarAccess.getAdditiveExpressionAccess().getOpADDITIVE_OPERATIONTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightExprAdditiveExpressionParserRuleCall_1_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRightExprAdditiveExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__LeftExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulExpressionAccess().getLeftExprCastExpressionParserRuleCall_0_0()); }
	ruleCastExpression{ after(grammarAccess.getMulExpressionAccess().getLeftExprCastExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulExpressionAccess().getOpMUL_OPERATIONTerminalRuleCall_1_0_0()); }
	RULE_MUL_OPERATION{ after(grammarAccess.getMulExpressionAccess().getOpMUL_OPERATIONTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpression__RightExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulExpressionAccess().getRightExprMulExpressionParserRuleCall_1_1_0()); }
	ruleMulExpression{ after(grammarAccess.getMulExpressionAccess().getRightExprMulExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__TypeAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExpressionAccess().getTypeQualifiedTypeSpecificationParserRuleCall_0_1_0()); }
	ruleQualifiedTypeSpecification{ after(grammarAccess.getCastExpressionAccess().getTypeQualifiedTypeSpecificationParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__ExprAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExpressionAccess().getExprCastExpressionParserRuleCall_0_3_0()); }
	ruleCastExpression{ after(grammarAccess.getCastExpressionAccess().getExprCastExpressionParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__UnaryExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExpressionAccess().getUnaryExprUnaryExpressionParserRuleCall_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getCastExpressionAccess().getUnaryExprUnaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__UnaryExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExprUNARY_OPERATIONTerminalRuleCall_0_0()); }
	RULE_UNARY_OPERATION{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExprUNARY_OPERATIONTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__PrimaryExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getPrimaryExprPrimaryExpressionParserRuleCall_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getUnaryExpressionAccess().getPrimaryExprPrimaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__LiteralAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralLiteralParserRuleCall_0_0()); }
	ruleLiteral{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_INCLUDE_LIB : '<' (RULE_ID '/')* RULE_ID '.' RULE_ID '>';

RULE_BOOLEAN : ('true'|'false');

RULE_SHIFT_OPERATION : ('<<'|'>>');

RULE_ADDITIVE_OPERATION : ('+'|'-');

RULE_MUL_OPERATION : ('*'|'/'|'%');

RULE_UNARY_OPERATION : ('&'|'*'|'+'|'-'|'~'|'!');

RULE_FDSYMBOL : ('f'|'F'|'d'|'D');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


