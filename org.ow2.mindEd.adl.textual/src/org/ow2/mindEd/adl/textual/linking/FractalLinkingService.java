package org.ow2.mindEd.adl.textual.linking;

import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.linking.impl.DefaultLinkingService;
import org.eclipse.xtext.linking.impl.IllegalNodeException;
import org.eclipse.xtext.nodemodel.ILeafNode;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.impl.HiddenLeafNode;
import org.eclipse.xtext.xtext.XtextLinkingService;
import org.ow2.mindEd.adl.textual.fractal.BindingDefinition;
import org.ow2.mindEd.adl.textual.fractal.SubComponentDefinition;
import org.ow2.mindEd.adl.textual.fractal.TypeDefinition;
import org.ow2.mindEd.adl.textual.fractal.impl.FractalFactoryImpl;
import org.ow2.mindEd.adl.textual.fractal.impl.TypeDefinitionImpl;
import org.ow2.mindEd.itf.editor.textual.fractalIDL.FractalIDLFactory;

/**
 * This class is used to create "fake" factory-related EObjects
 * in the EMF model with the Xtext-generated EClasses.
 * 
 * This behavior is mandatory as Mind Factories are completely
 * generated by the compiler and can't be found in the runtime
 * or anywhere else textually.
 * 
 * This class and its package are NOT generated by Xtext.
 * This behavior has been inspired by the following Eclipse
 * forum page :
 * http://www.eclipse.org/forums/index.php/mv/msg/295656/803468/#msg_803468
 */
public class FractalLinkingService extends XtextLinkingService {

	@Override
	public List<EObject> getLinkedObjects(EObject context, EReference ref, INode node) throws IllegalNodeException {
		List<EObject> list = super.getLinkedObjects(context, ref, node);
		
		if (context instanceof SubComponentDefinition) {
			
			/* Find the real "Factory" keyword */
			Iterator<ILeafNode> leafNodesIterator = node.getLeafNodes().iterator();
			ILeafNode currNode = null;
			while (leafNodesIterator.hasNext() && ((currNode = (ILeafNode) leafNodesIterator.next()) instanceof HiddenLeafNode));
			
			// The whitespace seems required
			if (currNode.getText().equals("Factory")) {

				URI uri = URI.createURI("fractal.lib.Factory");

				// Add Factory to the possible list !
				TypeDefinition newTypeDefinition = FractalFactoryImpl.eINSTANCE.createTypeDefinition();
				newTypeDefinition.setName("Factory");
				
				Resource r = context.eResource().getResourceSet().getResource(uri, false);
				if (r == null) {
					r = context.eResource().getResourceSet().createResource(uri);
					r.getContents().add(newTypeDefinition);
				}
				list = Collections.singletonList((EObject)newTypeDefinition);
			}
		} /* else if (context instanceof BindingDefinition && ref.getName().equals("sourceInterface")) {
			if (((BindingDefinition) context).getSourceParent().getType().getName().equals("Factory")) {
				URI uri = URI.createURI("fractal.api.Factory");

				// Add Factory to the possible list !
				org.ow2.mindEd.itf.editor.textual.fractalIDL.InterfaceDefinition newTypeDefinition = FractalIDLFactory.eINSTANCE.createInterfaceDefinition();
				
				// this should clash ?
				newTypeDefinition.setName("fractal.api.Factory");
				
				Resource r = context.eResource().getResourceSet().getResource(uri, false);
				if (r == null) {
					r = context.eResource().getResourceSet().createResource(uri);
					r.getContents().add(newTypeDefinition);
				}
				list = Collections.singletonList((EObject)newTypeDefinition);
			}
					
		}*/

		return list;
	}

}
