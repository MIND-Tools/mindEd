/*
* generated by Xtext
*/

package org.ow2.mindEd.idt.editor.textual.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.ow2.mindEd.itf.editor.textual.services.FractalItfGrammarAccess;

@Singleton
public class FractalIdtGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class IdtFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdtFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBegindefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBegindefConstantDefinitionBeginParserRuleCall_0_0 = (RuleCall)cBegindefAssignment_0.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefConstantDefinitionParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		private final Assignment cIncludesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIncludesIncludeDirectiveParserRuleCall_2_0 = (RuleCall)cIncludesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cConstantAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cConstantConstantDefinitionParserRuleCall_3_0_0 = (RuleCall)cConstantAssignment_3_0.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTypeTypeDefinitionParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Assignment cEndDefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndDefConstantDefinitionEndParserRuleCall_4_0 = (RuleCall)cEndDefAssignment_4.eContents().get(0);
		
		//IdtFile:
		//
		//	begindef=ConstantDefinitionBegin def=ConstantDefinition includes+=IncludeDirective* (constant+=ConstantDefinition |
		//
		//	type+=TypeDefinition)* endDef=ConstantDefinitionEnd;
		public ParserRule getRule() { return rule; }

		//begindef=ConstantDefinitionBegin def=ConstantDefinition includes+=IncludeDirective* (constant+=ConstantDefinition |
		//
		//type+=TypeDefinition)* endDef=ConstantDefinitionEnd
		public Group getGroup() { return cGroup; }

		//begindef=ConstantDefinitionBegin
		public Assignment getBegindefAssignment_0() { return cBegindefAssignment_0; }

		//ConstantDefinitionBegin
		public RuleCall getBegindefConstantDefinitionBeginParserRuleCall_0_0() { return cBegindefConstantDefinitionBeginParserRuleCall_0_0; }

		//def=ConstantDefinition
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//ConstantDefinition
		public RuleCall getDefConstantDefinitionParserRuleCall_1_0() { return cDefConstantDefinitionParserRuleCall_1_0; }

		//includes+=IncludeDirective*
		public Assignment getIncludesAssignment_2() { return cIncludesAssignment_2; }

		//IncludeDirective
		public RuleCall getIncludesIncludeDirectiveParserRuleCall_2_0() { return cIncludesIncludeDirectiveParserRuleCall_2_0; }

		//(constant+=ConstantDefinition | type+=TypeDefinition)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//constant+=ConstantDefinition
		public Assignment getConstantAssignment_3_0() { return cConstantAssignment_3_0; }

		//ConstantDefinition
		public RuleCall getConstantConstantDefinitionParserRuleCall_3_0_0() { return cConstantConstantDefinitionParserRuleCall_3_0_0; }

		//type+=TypeDefinition
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//TypeDefinition
		public RuleCall getTypeTypeDefinitionParserRuleCall_3_1_0() { return cTypeTypeDefinitionParserRuleCall_3_1_0; }

		//endDef=ConstantDefinitionEnd
		public Assignment getEndDefAssignment_4() { return cEndDefAssignment_4; }

		//ConstantDefinitionEnd
		public RuleCall getEndDefConstantDefinitionEndParserRuleCall_4_0() { return cEndDefConstantDefinitionEndParserRuleCall_4_0; }
	}

	public class ConstantDefinitionBeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDefinitionBegin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfndefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ConstantDefinitionBegin:
		//
		//	"#ifndef" name=ID;
		public ParserRule getRule() { return rule; }

		//"#ifndef" name=ID
		public Group getGroup() { return cGroup; }

		//"#ifndef"
		public Keyword getIfndefKeyword_0() { return cIfndefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ConstantDefinitionEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDefinitionEnd");
		private final Keyword cEndifKeyword = (Keyword)rule.eContents().get(1);
		
		//ConstantDefinitionEnd:
		//
		//	"#endif";
		public ParserRule getRule() { return rule; }

		//"#endif"
		public Keyword getEndifKeyword() { return cEndifKeyword; }
	}
	
	
	private IdtFileElements pIdtFile;
	private ConstantDefinitionBeginElements pConstantDefinitionBegin;
	private ConstantDefinitionEndElements pConstantDefinitionEnd;
	
	private final Grammar grammar;

	private FractalItfGrammarAccess gaFractalItf;

	@Inject
	public FractalIdtGrammarAccess(GrammarProvider grammarProvider,
		FractalItfGrammarAccess gaFractalItf) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaFractalItf = gaFractalItf;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.ow2.mindEd.idt.editor.textual.FractalIdt".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public FractalItfGrammarAccess getFractalItfGrammarAccess() {
		return gaFractalItf;
	}

	
	//IdtFile:
	//
	//	begindef=ConstantDefinitionBegin def=ConstantDefinition includes+=IncludeDirective* (constant+=ConstantDefinition |
	//
	//	type+=TypeDefinition)* endDef=ConstantDefinitionEnd;
	public IdtFileElements getIdtFileAccess() {
		return (pIdtFile != null) ? pIdtFile : (pIdtFile = new IdtFileElements());
	}
	
	public ParserRule getIdtFileRule() {
		return getIdtFileAccess().getRule();
	}

	//ConstantDefinitionBegin:
	//
	//	"#ifndef" name=ID;
	public ConstantDefinitionBeginElements getConstantDefinitionBeginAccess() {
		return (pConstantDefinitionBegin != null) ? pConstantDefinitionBegin : (pConstantDefinitionBegin = new ConstantDefinitionBeginElements());
	}
	
	public ParserRule getConstantDefinitionBeginRule() {
		return getConstantDefinitionBeginAccess().getRule();
	}

	//ConstantDefinitionEnd:
	//
	//	"#endif";
	public ConstantDefinitionEndElements getConstantDefinitionEndAccess() {
		return (pConstantDefinitionEnd != null) ? pConstantDefinitionEnd : (pConstantDefinitionEnd = new ConstantDefinitionEndElements());
	}
	
	public ParserRule getConstantDefinitionEndRule() {
		return getConstantDefinitionEndAccess().getRule();
	}

	//ItfFile:
	//
	//	includes+=IncludeDirective* (constant+=ConstantDefinition | type+=TypeDefinition)* interface=InterfaceDefinition
	//
	//	";"?;
	public FractalItfGrammarAccess.ItfFileElements getItfFileAccess() {
		return gaFractalItf.getItfFileAccess();
	}
	
	public ParserRule getItfFileRule() {
		return getItfFileAccess().getRule();
	}

	//// Type definition part
	// TypeDefinition:
	//
	//	(TypedefSpecification | StructOrUnionSpecification | EnumSpecification) ";";
	public FractalItfGrammarAccess.TypeDefinitionElements getTypeDefinitionAccess() {
		return gaFractalItf.getTypeDefinitionAccess();
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//TypedefSpecification:
	//
	//	"typedef" qualifedType=QualifiedTypeSpecification dec=Declarators;
	public FractalItfGrammarAccess.TypedefSpecificationElements getTypedefSpecificationAccess() {
		return gaFractalItf.getTypedefSpecificationAccess();
	}
	
	public ParserRule getTypedefSpecificationRule() {
		return getTypedefSpecificationAccess().getRule();
	}

	//QualifiedTypeSpecification:
	//
	//	typeQualifier+=TypeQualifier* typeSpec=TypeSpecification;
	public FractalItfGrammarAccess.QualifiedTypeSpecificationElements getQualifiedTypeSpecificationAccess() {
		return gaFractalItf.getQualifiedTypeSpecificationAccess();
	}
	
	public ParserRule getQualifiedTypeSpecificationRule() {
		return getQualifiedTypeSpecificationAccess().getRule();
	}

	//enum TypeQualifier:
	//
	//	const | volatile;
	public FractalItfGrammarAccess.TypeQualifierElements getTypeQualifierAccess() {
		return gaFractalItf.getTypeQualifierAccess();
	}
	
	public EnumRule getTypeQualifierRule() {
		return getTypeQualifierAccess().getRule();
	}

	//TypeSpecification:
	//
	//	typeDefName=QualifiedName | StructOrUnionSpecification | EnumSpecification | typeSpecifier+=TypeSpecifier
	//
	//	typeSpecifier+=TypeSpecifier*;
	public FractalItfGrammarAccess.TypeSpecificationElements getTypeSpecificationAccess() {
		return gaFractalItf.getTypeSpecificationAccess();
	}
	
	public ParserRule getTypeSpecificationRule() {
		return getTypeSpecificationAccess().getRule();
	}

	//enum TypeSpecifier:
	//
	//	void | char | short | int | long | float | double | signed | unsigned | string | int8_t | uint8_t | int16_t |
	//
	//	uint16_t | int32_t | uint32_t | int64_t | uint64_t | intptr_t | uintptr_t;
	public FractalItfGrammarAccess.TypeSpecifierElements getTypeSpecifierAccess() {
		return gaFractalItf.getTypeSpecifierAccess();
	}
	
	public EnumRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}

	//StructOrUnionSpecification:
	//
	//	StructOrUnionDefinition | StructorUnionReference;
	public FractalItfGrammarAccess.StructOrUnionSpecificationElements getStructOrUnionSpecificationAccess() {
		return gaFractalItf.getStructOrUnionSpecificationAccess();
	}
	
	public ParserRule getStructOrUnionSpecificationRule() {
		return getStructOrUnionSpecificationAccess().getRule();
	}

	//StructOrUnionDefinition:
	//
	//	struct=StructOrUnion id=ID? "{" structMember+=StructMember* "}";
	public FractalItfGrammarAccess.StructOrUnionDefinitionElements getStructOrUnionDefinitionAccess() {
		return gaFractalItf.getStructOrUnionDefinitionAccess();
	}
	
	public ParserRule getStructOrUnionDefinitionRule() {
		return getStructOrUnionDefinitionAccess().getRule();
	}

	//StructorUnionReference:
	//
	//	struct=StructOrUnion id=ID;
	public FractalItfGrammarAccess.StructorUnionReferenceElements getStructorUnionReferenceAccess() {
		return gaFractalItf.getStructorUnionReferenceAccess();
	}
	
	public ParserRule getStructorUnionReferenceRule() {
		return getStructorUnionReferenceAccess().getRule();
	}

	//StructOrUnion:
	//
	//	"struct" | "union";
	public FractalItfGrammarAccess.StructOrUnionElements getStructOrUnionAccess() {
		return gaFractalItf.getStructOrUnionAccess();
	}
	
	public ParserRule getStructOrUnionRule() {
		return getStructOrUnionAccess().getRule();
	}

	//StructMember:
	//
	//	annotationsList=AnnotationsList? qualType=QualifiedTypeSpecification dec=Declarators (":"
	//
	//	constExpr=ConstantExpression)? ";";
	public FractalItfGrammarAccess.StructMemberElements getStructMemberAccess() {
		return gaFractalItf.getStructMemberAccess();
	}
	
	public ParserRule getStructMemberRule() {
		return getStructMemberAccess().getRule();
	}

	//EnumSpecification:
	//
	//	EnumDefinition | EnumReference;
	public FractalItfGrammarAccess.EnumSpecificationElements getEnumSpecificationAccess() {
		return gaFractalItf.getEnumSpecificationAccess();
	}
	
	public ParserRule getEnumSpecificationRule() {
		return getEnumSpecificationAccess().getRule();
	}

	//EnumDefinition:
	//
	//	"enum" id=ID? "{" enumMemberList=EnumMemberList "}";
	public FractalItfGrammarAccess.EnumDefinitionElements getEnumDefinitionAccess() {
		return gaFractalItf.getEnumDefinitionAccess();
	}
	
	public ParserRule getEnumDefinitionRule() {
		return getEnumDefinitionAccess().getRule();
	}

	//EnumReference:
	//
	//	"enum" id=ID;
	public FractalItfGrammarAccess.EnumReferenceElements getEnumReferenceAccess() {
		return gaFractalItf.getEnumReferenceAccess();
	}
	
	public ParserRule getEnumReferenceRule() {
		return getEnumReferenceAccess().getRule();
	}

	//EnumMemberList:
	//
	//	enumMember+=EnumMember ("," enumMember+=EnumMember)*;
	public FractalItfGrammarAccess.EnumMemberListElements getEnumMemberListAccess() {
		return gaFractalItf.getEnumMemberListAccess();
	}
	
	public ParserRule getEnumMemberListRule() {
		return getEnumMemberListAccess().getRule();
	}

	//EnumMember: // Is the following really needed ??
	// //(annotationsList=AnnotationsList)?
	// name=ID ("="
	//
	//	constExpr=ConstantExpression)?;
	public FractalItfGrammarAccess.EnumMemberElements getEnumMemberAccess() {
		return gaFractalItf.getEnumMemberAccess();
	}
	
	public ParserRule getEnumMemberRule() {
		return getEnumMemberAccess().getRule();
	}

	//Declarators:
	//
	//	dec=Declarator ("," declaratorList+=Declarator)*;
	public FractalItfGrammarAccess.DeclaratorsElements getDeclaratorsAccess() {
		return gaFractalItf.getDeclaratorsAccess();
	}
	
	public ParserRule getDeclaratorsRule() {
		return getDeclaratorsAccess().getRule();
	}

	//Declarator:
	//
	//	pointer+=QualifiedPointerSpecification* (dc=DirectNamedDeclarator | dc=DirectAnonymousDeclarator | "(" dec=Declarator
	//
	//	")");
	public FractalItfGrammarAccess.DeclaratorElements getDeclaratorAccess() {
		return gaFractalItf.getDeclaratorAccess();
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}

	////AbstractDeclarator:
	// //  pointer=PointerSpecification
	// //  dc=AbstractDirectDeclarator?
	// //;
	// // * -> const/volatile
	//
	//
	//QualifiedPointerSpecification:
	//
	//	{QualifiedPointerSpecification} "*" typeQualifiers+=TypeQualifier*;
	public FractalItfGrammarAccess.QualifiedPointerSpecificationElements getQualifiedPointerSpecificationAccess() {
		return gaFractalItf.getQualifiedPointerSpecificationAccess();
	}
	
	public ParserRule getQualifiedPointerSpecificationRule() {
		return getQualifiedPointerSpecificationAccess().getRule();
	}

	//DirectNamedDeclarator:
	//
	//	id=ID array+=ArraySpecification*;
	public FractalItfGrammarAccess.DirectNamedDeclaratorElements getDirectNamedDeclaratorAccess() {
		return gaFractalItf.getDirectNamedDeclaratorAccess();
	}
	
	public ParserRule getDirectNamedDeclaratorRule() {
		return getDirectNamedDeclaratorAccess().getRule();
	}

	//DirectAnonymousDeclarator:
	//
	//	{DirectAnonymousDeclarator} array+=ArraySpecification*;
	public FractalItfGrammarAccess.DirectAnonymousDeclaratorElements getDirectAnonymousDeclaratorAccess() {
		return gaFractalItf.getDirectAnonymousDeclaratorAccess();
	}
	
	public ParserRule getDirectAnonymousDeclaratorRule() {
		return getDirectAnonymousDeclaratorAccess().getRule();
	}

	//// AbstractDirectDeclarator:
	// //  ( '(' dec=AbstractDeclarator ')'
	// //  	arrays += ArraySpecification*
	//
	//
	////  ) | array += ArraySpecification+;
	// ArraySpecification:
	//
	//	unspecifiedSize?="[" "]" | "[" fixedSize=ConstantExpression "]";
	public FractalItfGrammarAccess.ArraySpecificationElements getArraySpecificationAccess() {
		return gaFractalItf.getArraySpecificationAccess();
	}
	
	public ParserRule getArraySpecificationRule() {
		return getArraySpecificationAccess().getRule();
	}

	//QualifiedName:
	//
	//	ID ("." ID)*;
	public FractalItfGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaFractalItf.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//// Interface definition part
	// ConstantDefinition:
	//
	//	"#define" name=ID expr=ConstantExpression?;
	public FractalItfGrammarAccess.ConstantDefinitionElements getConstantDefinitionAccess() {
		return gaFractalItf.getConstantDefinitionAccess();
	}
	
	public ParserRule getConstantDefinitionRule() {
		return getConstantDefinitionAccess().getRule();
	}

	//InterfaceDefinition:
	//
	//	annotationsList=AnnotationsList? "interface" "unmanaged"? name=QualifiedName (":"
	//
	//	fqn2=[InterfaceDefinition|QualifiedName])? "{" methodDef+=MethodDefinition* "}";
	public FractalItfGrammarAccess.InterfaceDefinitionElements getInterfaceDefinitionAccess() {
		return gaFractalItf.getInterfaceDefinitionAccess();
	}
	
	public ParserRule getInterfaceDefinitionRule() {
		return getInterfaceDefinitionAccess().getRule();
	}

	//MethodDefinition:
	//
	//	annotationsList=AnnotationsList? qualifiedTypeSpec=QualifiedTypeSpecification
	//
	//	pointerSpecification+=QualifiedPointerSpecification* name=ID ("(" "void"? ")" | "(" ParameterList=ParameterList ")")
	//
	//	";";
	public FractalItfGrammarAccess.MethodDefinitionElements getMethodDefinitionAccess() {
		return gaFractalItf.getMethodDefinitionAccess();
	}
	
	public ParserRule getMethodDefinitionRule() {
		return getMethodDefinitionAccess().getRule();
	}

	//ParameterList:
	//
	//	params+=Parameter ("," params+=Parameter)* ("," "...")?;
	public FractalItfGrammarAccess.ParameterListElements getParameterListAccess() {
		return gaFractalItf.getParameterListAccess();
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Parameter:
	//
	//	annotationsList=AnnotationsList? ParameterQualifier+=ParameterQualifier* qualifiedTypeSpec=QualifiedTypeSpecification
	//
	//	dec=Declarator / * | absDec=AbstractDeclarator * /;
	public FractalItfGrammarAccess.ParameterElements getParameterAccess() {
		return gaFractalItf.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// include directive
	// enum ParameterQualifier:
	//
	//	in | out;
	public FractalItfGrammarAccess.ParameterQualifierElements getParameterQualifierAccess() {
		return gaFractalItf.getParameterQualifierAccess();
	}
	
	public EnumRule getParameterQualifierRule() {
		return getParameterQualifierAccess().getRule();
	}

	//IncludeDirective:
	//
	//	"#include" (importedURI=STRING ("/" STRING)* | includeID=INCLUDE_LIB);
	public FractalItfGrammarAccess.IncludeDirectiveElements getIncludeDirectiveAccess() {
		return gaFractalItf.getIncludeDirectiveAccess();
	}
	
	public ParserRule getIncludeDirectiveRule() {
		return getIncludeDirectiveAccess().getRule();
	}

	//terminal INCLUDE_LIB:
	//
	//	"<" (ID "/")* ID "." ID ">";
	public TerminalRule getINCLUDE_LIBRule() {
		return gaFractalItf.getINCLUDE_LIBRule();
	} 

	//AnnotationsList:
	//
	//	annotations+=Annotation annotations+=Annotation*;
	public FractalItfGrammarAccess.AnnotationsListElements getAnnotationsListAccess() {
		return gaFractalItf.getAnnotationsListAccess();
	}
	
	public ParserRule getAnnotationsListRule() {
		return getAnnotationsListAccess().getRule();
	}

	//Annotation:
	//
	//	"@" name=QualifiedName ("(" annotationParametersList+=AnnotationValuePair (","
	//
	//	annotationParametersList+=AnnotationValuePair)* ")")?;
	public FractalItfGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaFractalItf.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//AnnotationValuePair:
	//
	//	(name=ID "=")? value=AnnotationValue;
	public FractalItfGrammarAccess.AnnotationValuePairElements getAnnotationValuePairAccess() {
		return gaFractalItf.getAnnotationValuePairAccess();
	}
	
	public ParserRule getAnnotationValuePairRule() {
		return getAnnotationValuePairAccess().getRule();
	}

	//AnnotationValue:
	//
	//	value=(signedINT | "null" | BOOLEAN | QualifiedName | STRING) | arrayValue=ArrayAnnotationValue;
	public FractalItfGrammarAccess.AnnotationValueElements getAnnotationValueAccess() {
		return gaFractalItf.getAnnotationValueAccess();
	}
	
	public ParserRule getAnnotationValueRule() {
		return getAnnotationValueAccess().getRule();
	}

	//ArrayAnnotationValue:
	//
	//	"{" values+=AnnotationValue ("," values+=AnnotationValue)* "}";
	public FractalItfGrammarAccess.ArrayAnnotationValueElements getArrayAnnotationValueAccess() {
		return gaFractalItf.getArrayAnnotationValueAccess();
	}
	
	public ParserRule getArrayAnnotationValueRule() {
		return getArrayAnnotationValueAccess().getRule();
	}

	//terminal BOOLEAN:
	//
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaFractalItf.getBOOLEANRule();
	} 

	//signedINT:
	//
	//	ADDITIVE_OPERATION? INT;
	public FractalItfGrammarAccess.SignedINTElements getSignedINTAccess() {
		return gaFractalItf.getSignedINTAccess();
	}
	
	public ParserRule getSignedINTRule() {
		return getSignedINTAccess().getRule();
	}

	//ConstantExpression:
	//
	//	LogicalOrExpression;
	public FractalItfGrammarAccess.ConstantExpressionElements getConstantExpressionAccess() {
		return gaFractalItf.getConstantExpressionAccess();
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}

	//LogicalOrExpression:
	//
	//	leftExpr=LogicalAndExpression ("||" rightExpr=LogicalOrExpression)?;
	public FractalItfGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaFractalItf.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression:
	//
	//	leftExpr=OrExpression ("&&" rightExpr=LogicalAndExpression)?;
	public FractalItfGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaFractalItf.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//OrExpression:
	//
	//	leftExpr=XorExpression ("|" rightExpr=OrExpression)?;
	public FractalItfGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaFractalItf.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//XorExpression:
	//
	//	leftExpr=AndExpression ("^" rightExpr=XorExpression)?;
	public FractalItfGrammarAccess.XorExpressionElements getXorExpressionAccess() {
		return gaFractalItf.getXorExpressionAccess();
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}

	//AndExpression:
	//
	//	leftExpr=ShiftExpression ("&" rightExpr=AndExpression)?;
	public FractalItfGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaFractalItf.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//ShiftExpression:
	//
	//	leftExpr=AdditiveExpression (op=SHIFT_OPERATION rightExpr=ShiftExpression)?;
	public FractalItfGrammarAccess.ShiftExpressionElements getShiftExpressionAccess() {
		return gaFractalItf.getShiftExpressionAccess();
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}

	//AdditiveExpression:
	//
	//	leftExpr=MulExpression (op=ADDITIVE_OPERATION rightExpr=AdditiveExpression)?;
	public FractalItfGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaFractalItf.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MulExpression:
	//
	//	leftExpr=CastExpression (op=MUL_OPERATION rightExpr=MulExpression)?;
	public FractalItfGrammarAccess.MulExpressionElements getMulExpressionAccess() {
		return gaFractalItf.getMulExpressionAccess();
	}
	
	public ParserRule getMulExpressionRule() {
		return getMulExpressionAccess().getRule();
	}

	//CastExpression:
	//
	//	"(" type=QualifiedTypeSpecification ")" expr=CastExpression | unaryExpr=UnaryExpression;
	public FractalItfGrammarAccess.CastExpressionElements getCastExpressionAccess() {
		return gaFractalItf.getCastExpressionAccess();
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}

	//UnaryExpression:
	//
	//	unaryExpr=UNARY_OPERATION? primaryExpr=PrimaryExpression;
	public FractalItfGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaFractalItf.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression:
	//
	//	literal=Literal | "(" ConstantExpression ")";
	public FractalItfGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaFractalItf.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Literal:
	//
	//	ID | STRING | FloatingPointLiteral;
	public FractalItfGrammarAccess.LiteralElements getLiteralAccess() {
		return gaFractalItf.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//terminal SHIFT_OPERATION:
	//
	//	"<<" | ">>";
	public TerminalRule getSHIFT_OPERATIONRule() {
		return gaFractalItf.getSHIFT_OPERATIONRule();
	} 

	//terminal ADDITIVE_OPERATION:
	//
	//	"+" | "-";
	public TerminalRule getADDITIVE_OPERATIONRule() {
		return gaFractalItf.getADDITIVE_OPERATIONRule();
	} 

	//terminal MUL_OPERATION:
	//
	//	"*" | "/" | "%";
	public TerminalRule getMUL_OPERATIONRule() {
		return gaFractalItf.getMUL_OPERATIONRule();
	} 

	//terminal UNARY_OPERATION:
	//
	//	"&" | "*" | "+" | "-" | "~" | "!";
	public TerminalRule getUNARY_OPERATIONRule() {
		return gaFractalItf.getUNARY_OPERATIONRule();
	} 

	//FloatingPointLiteral:
	//
	//	signedINT+ "." signedINT* Exponent? FDSYMBOL? | "." signedINT+ Exponent? FDSYMBOL? | signedINT+ Exponent FDSYMBOL? |
	//
	//	signedINT+ Exponent? FDSYMBOL?;
	public FractalItfGrammarAccess.FloatingPointLiteralElements getFloatingPointLiteralAccess() {
		return gaFractalItf.getFloatingPointLiteralAccess();
	}
	
	public ParserRule getFloatingPointLiteralRule() {
		return getFloatingPointLiteralAccess().getRule();
	}

	//Exponent:
	//
	//	("e" | "E" ADDITIVE_OPERATION)? INT+;
	public FractalItfGrammarAccess.ExponentElements getExponentAccess() {
		return gaFractalItf.getExponentAccess();
	}
	
	public ParserRule getExponentRule() {
		return getExponentAccess().getRule();
	}

	//terminal FDSYMBOL:
	//
	//	"f" | "F" | "d" | "D";
	public TerminalRule getFDSYMBOLRule() {
		return gaFractalItf.getFDSYMBOLRule();
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaFractalItf.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaFractalItf.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaFractalItf.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaFractalItf.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaFractalItf.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaFractalItf.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaFractalItf.getANY_OTHERRule();
	} 
}
