/*
 * generated by Xtext
 */
package org.ow2.fractal.mind.idl.outline;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.common.editor.outline.ContentOutlineNode;
import org.eclipse.xtext.ui.common.editor.outline.transformer.AbstractDeclarativeSemanticModelTransformer;
import org.ow2.fractal.mind.idl.fractalIDL.ConstantDefinition;
import org.ow2.fractal.mind.idl.fractalIDL.EnumDefinition;
import org.ow2.fractal.mind.idl.fractalIDL.EnumReference;
import org.ow2.fractal.mind.idl.fractalIDL.InterfaceDefinition;
import org.ow2.fractal.mind.idl.fractalIDL.ItfFile;
import org.ow2.fractal.mind.idl.fractalIDL.MethodDefinition;
import org.ow2.fractal.mind.idl.fractalIDL.Parameter;
import org.ow2.fractal.mind.idl.fractalIDL.StructOrUnionDefinition;
import org.ow2.fractal.mind.idl.fractalIDL.TypedefSpecification;

/**
 * customization of the outline structure
 * 
 * @author Damien Fournier
 */
public class FractalItfTransformer extends
		AbstractDeclarativeSemanticModelTransformer {

	public ContentOutlineNode createNode(ItfFile obj,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super.newOutlineNode(obj, parentNode);
		node.setLabel("Interface Definition");
		return node;
	}

	public ContentOutlineNode createNode(InterfaceDefinition obj,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super.newOutlineNode(obj, parentNode);
		node.setLabel("interface " + obj.getFqn());
		return node;
	}

	public ContentOutlineNode createNode(ConstantDefinition obj,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super.newOutlineNode(obj, parentNode);
		node.setLabel("#define " + obj.getId().getId());
		return node;
	}

	public ContentOutlineNode createNode(TypedefSpecification obj,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super.newOutlineNode(obj, parentNode);
		// node.setLabel("typedef " + obj.getDec().getDec().getId().getId());

		String label = "typedef";

		if (obj.getQualifedType().getTypeSpec().getTypeDefName() != null)
			label = label + " "
					+ obj.getQualifedType().getTypeSpec().getTypeDefName();

		node.setLabel(label);
		return node;
	}

	public ContentOutlineNode createNode(StructOrUnionDefinition obj,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super.newOutlineNode(obj, parentNode);
		node.setLabel(obj.getStruct() + " " + obj.getId().getId());
		return node;
	}

	public ContentOutlineNode createNode(EnumDefinition obj,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super.newOutlineNode(obj, parentNode);
		node.setLabel("enum " + obj.getId().getId());
		return node;
	}

	public ContentOutlineNode createNode(EnumReference obj,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super.newOutlineNode(obj, parentNode);
		node.setLabel("enum " + obj.getId().getId());
		return node;
	}

	public ContentOutlineNode createNode(MethodDefinition obj,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super.newOutlineNode(obj, parentNode);

		String label = obj.getId().getId() + "(";

		if (obj.getParameterList().getParam() != null)

			label = label
					+ obj.getParameterList().getParam().getQualifiedTypeSpec()
							.getTypeSpec().getTypeSpecifier().get(0);

		for (Parameter parameter : obj.getParameterList().getParams()) {
			label = label
					+ ","
					+ parameter.getQualifiedTypeSpec().getTypeSpec()
							.getTypeSpecifier().get(0);
		}

		label = label + ")";

		node.setLabel(label);
		return node;
	}

	public List<EObject> getChildren(ConstantDefinition obj) {
		return NO_CHILDREN;
	}

	public List<EObject> getChildren(MethodDefinition obj) {
		return NO_CHILDREN;
	}

	public List<EObject> getChildren(TypedefSpecification obj) {
		return NO_CHILDREN;
	}

	public List<EObject> getChildren(StructOrUnionDefinition obj) {
		return NO_CHILDREN;
	}

	public List<EObject> getChildren(EnumDefinition obj) {
		return NO_CHILDREN;
	}

	public List<EObject> getChildren(EnumReference obj) {
		return NO_CHILDREN;
	}

	public List<EObject> getChildren(ItfFile obj) {
		return obj.eContents();
	}

	// public List<EObject> getChildren(Property property) {
	// return NO_CHILDREN;
	// }

}
