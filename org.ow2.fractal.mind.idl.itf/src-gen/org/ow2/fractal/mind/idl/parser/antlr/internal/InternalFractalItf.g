/*
* generated by Xtext
*/
grammar InternalFractalItf;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.ow2.fractal.mind.idl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.ow2.fractal.mind.idl.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.ow2.fractal.mind.idl.services.FractalItfGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private FractalItfGrammarAccess grammarAccess;
 	
    public InternalFractalItfParser(TokenStream input, IAstFactory factory, FractalItfGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/ow2/fractal/mind/idl/parser/antlr/internal/InternalFractalItf.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ItfFile";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleItfFile
entryRuleItfFile returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getItfFileRule(), currentNode); }
	 iv_ruleItfFile=ruleItfFile 
	 { $current=$iv_ruleItfFile.current; } 
	 EOF 
;

// Rule ItfFile
ruleItfFile returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getItfFileAccess().getIncludesIncludeDirectiveParserRuleCall_0_0(), currentNode); 
	    }
		lv_includes_0_0=ruleIncludeDirective		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getItfFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"includes",
	        		lv_includes_0_0, 
	        		"IncludeDirective", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getItfFileAccess().getConstantConstantDefinitionParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_constant_1_0=ruleConstantDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getItfFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constant",
	        		lv_constant_1_0, 
	        		"ConstantDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getItfFileAccess().getTypeTypeDefinitionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getItfFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getItfFileAccess().getInterfaceInterfaceDefinitionParserRuleCall_2_0(), currentNode); 
	    }
		lv_interface_3_0=ruleInterfaceDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getItfFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"interface",
	        		lv_interface_3_0, 
	        		"InterfaceDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	';' 
    {
        createLeafNode(grammarAccess.getItfFileAccess().getSemicolonKeyword_3(), null); 
    }
)?)
;





// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeDefinitionRule(), currentNode); }
	 iv_ruleTypeDefinition=ruleTypeDefinition 
	 { $current=$iv_ruleTypeDefinition.current; } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeDefinitionAccess().getTypedefSpecificationParserRuleCall_0_0(), currentNode); 
    }
    this_TypedefSpecification_0=ruleTypedefSpecification
    { 
        $current = $this_TypedefSpecification_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeDefinitionAccess().getStructOrUnionSpecificationParserRuleCall_0_1(), currentNode); 
    }
    this_StructOrUnionSpecification_1=ruleStructOrUnionSpecification
    { 
        $current = $this_StructOrUnionSpecification_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeDefinitionAccess().getEnumSpecificationParserRuleCall_0_2(), currentNode); 
    }
    this_EnumSpecification_2=ruleEnumSpecification
    { 
        $current = $this_EnumSpecification_2.current; 
        currentNode = currentNode.getParent();
    }
)	';' 
    {
        createLeafNode(grammarAccess.getTypeDefinitionAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleTypedefSpecification
entryRuleTypedefSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypedefSpecificationRule(), currentNode); }
	 iv_ruleTypedefSpecification=ruleTypedefSpecification 
	 { $current=$iv_ruleTypedefSpecification.current; } 
	 EOF 
;

// Rule TypedefSpecification
ruleTypedefSpecification returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'typedef' 
    {
        createLeafNode(grammarAccess.getTypedefSpecificationAccess().getTypedefKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypedefSpecificationAccess().getQualifedTypeQualifiedTypeSpecificationParserRuleCall_1_0(), currentNode); 
	    }
		lv_qualifedType_1_0=ruleQualifiedTypeSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypedefSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"qualifedType",
	        		lv_qualifedType_1_0, 
	        		"QualifiedTypeSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypedefSpecificationAccess().getDecDeclaratorsParserRuleCall_2_0(), currentNode); 
	    }
		lv_dec_2_0=ruleDeclarators		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypedefSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dec",
	        		lv_dec_2_0, 
	        		"Declarators", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleQualifiedTypeSpecification
entryRuleQualifiedTypeSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedTypeSpecificationRule(), currentNode); }
	 iv_ruleQualifiedTypeSpecification=ruleQualifiedTypeSpecification 
	 { $current=$iv_ruleQualifiedTypeSpecification.current; } 
	 EOF 
;

// Rule QualifiedTypeSpecification
ruleQualifiedTypeSpecification returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedTypeSpecificationAccess().getTypeQualifierTypeQualifierEnumRuleCall_0_0(), currentNode); 
	    }
		lv_typeQualifier_0_0=ruleTypeQualifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedTypeSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeQualifier",
	        		lv_typeQualifier_0_0, 
	        		"TypeQualifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedTypeSpecificationAccess().getTypeSpecTypeSpecificationParserRuleCall_1_0(), currentNode); 
	    }
		lv_typeSpec_1_0=ruleTypeSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedTypeSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeSpec",
	        		lv_typeSpec_1_0, 
	        		"TypeSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTypeSpecification
entryRuleTypeSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeSpecificationRule(), currentNode); }
	 iv_ruleTypeSpecification=ruleTypeSpecification 
	 { $current=$iv_ruleTypeSpecification.current; } 
	 EOF 
;

// Rule TypeSpecification
ruleTypeSpecification returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeSpecificationAccess().getTypeDefNameTypedefNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_typeDefName_0_0=ruleTypedefName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeDefName",
	        		lv_typeDefName_0_0, 
	        		"TypedefName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeSpecificationAccess().getStructOrUnionSpecificationParserRuleCall_1(), currentNode); 
    }
    this_StructOrUnionSpecification_1=ruleStructOrUnionSpecification
    { 
        $current = $this_StructOrUnionSpecification_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeSpecificationAccess().getEnumSpecificationParserRuleCall_2(), currentNode); 
    }
    this_EnumSpecification_2=ruleEnumSpecification
    { 
        $current = $this_EnumSpecification_2.current; 
        currentNode = currentNode.getParent();
    }

    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeSpecificationAccess().getTypeSpecifierTypeSpecifierEnumRuleCall_3_0(), currentNode); 
	    }
		lv_typeSpecifier_3_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeSpecifier",
	        		lv_typeSpecifier_3_0, 
	        		"TypeSpecifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleTypedefName
entryRuleTypedefName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypedefNameRule(), currentNode); } 
	 iv_ruleTypedefName=ruleTypedefName 
	 { $current=$iv_ruleTypedefName.current.getText(); }  
	 EOF 
;

// Rule TypedefName
ruleTypedefName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getTypedefNameAccess().getFullyQualifiedNameParserRuleCall(), currentNode); 
    }
    this_FullyQualifiedName_0=ruleFullyQualifiedName    {
		$current.merge(this_FullyQualifiedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleStructOrUnionSpecification
entryRuleStructOrUnionSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStructOrUnionSpecificationRule(), currentNode); }
	 iv_ruleStructOrUnionSpecification=ruleStructOrUnionSpecification 
	 { $current=$iv_ruleStructOrUnionSpecification.current; } 
	 EOF 
;

// Rule StructOrUnionSpecification
ruleStructOrUnionSpecification returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStructOrUnionSpecificationAccess().getStructOrUnionDefinitionParserRuleCall_0(), currentNode); 
    }
    this_StructOrUnionDefinition_0=ruleStructOrUnionDefinition
    { 
        $current = $this_StructOrUnionDefinition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStructOrUnionSpecificationAccess().getStructorUnionReferenceParserRuleCall_1(), currentNode); 
    }
    this_StructorUnionReference_1=ruleStructorUnionReference
    { 
        $current = $this_StructorUnionReference_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleStructOrUnionDefinition
entryRuleStructOrUnionDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStructOrUnionDefinitionRule(), currentNode); }
	 iv_ruleStructOrUnionDefinition=ruleStructOrUnionDefinition 
	 { $current=$iv_ruleStructOrUnionDefinition.current; } 
	 EOF 
;

// Rule StructOrUnionDefinition
ruleStructOrUnionDefinition returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStructOrUnionDefinitionAccess().getStructStructOrUnionParserRuleCall_0_0(), currentNode); 
	    }
		lv_struct_0_0=ruleStructOrUnion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStructOrUnionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"struct",
	        		lv_struct_0_0, 
	        		"StructOrUnion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_id_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getStructOrUnionDefinitionAccess().getIdIDTerminalRuleCall_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStructOrUnionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'{' 
    {
        createLeafNode(grammarAccess.getStructOrUnionDefinitionAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStructOrUnionDefinitionAccess().getStructMemberStructMemberParserRuleCall_3_0(), currentNode); 
	    }
		lv_structMember_3_0=ruleStructMember		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStructOrUnionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"structMember",
	        		lv_structMember_3_0, 
	        		"StructMember", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getStructOrUnionDefinitionAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleStructorUnionReference
entryRuleStructorUnionReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStructorUnionReferenceRule(), currentNode); }
	 iv_ruleStructorUnionReference=ruleStructorUnionReference 
	 { $current=$iv_ruleStructorUnionReference.current; } 
	 EOF 
;

// Rule StructorUnionReference
ruleStructorUnionReference returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStructorUnionReferenceAccess().getStructStructOrUnionParserRuleCall_0_0(), currentNode); 
	    }
		lv_struct_0_0=ruleStructOrUnion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStructorUnionReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"struct",
	        		lv_struct_0_0, 
	        		"StructOrUnion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_id_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getStructorUnionReferenceAccess().getIdIDTerminalRuleCall_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStructorUnionReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleStructOrUnion
entryRuleStructOrUnion returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStructOrUnionRule(), currentNode); } 
	 iv_ruleStructOrUnion=ruleStructOrUnion 
	 { $current=$iv_ruleStructOrUnion.current.getText(); }  
	 EOF 
;

// Rule StructOrUnion
ruleStructOrUnion returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='struct' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getStructOrUnionAccess().getStructKeyword_0(), null); 
    }

    |
	kw='union' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getStructOrUnionAccess().getUnionKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleStructMember
entryRuleStructMember returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStructMemberRule(), currentNode); }
	 iv_ruleStructMember=ruleStructMember 
	 { $current=$iv_ruleStructMember.current; } 
	 EOF 
;

// Rule StructMember
ruleStructMember returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStructMemberAccess().getAnnotationsAnnotationsParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStructMemberRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotations", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStructMemberAccess().getQualTypeQualifiedTypeSpecificationParserRuleCall_1_0(), currentNode); 
	    }
		lv_qualType_1_0=ruleQualifiedTypeSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStructMemberRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"qualType",
	        		lv_qualType_1_0, 
	        		"QualifiedTypeSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStructMemberAccess().getDecDeclaratorsParserRuleCall_2_0(), currentNode); 
	    }
		lv_dec_2_0=ruleDeclarators		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStructMemberRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dec",
	        		lv_dec_2_0, 
	        		"Declarators", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getStructMemberAccess().getColonKeyword_3_0(), null); 
    }
RULE_INT
    { 
    createLeafNode(grammarAccess.getStructMemberAccess().getINTTerminalRuleCall_3_1(), null); 
    }
)?	';' 
    {
        createLeafNode(grammarAccess.getStructMemberAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleEnumSpecification
entryRuleEnumSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumSpecificationRule(), currentNode); }
	 iv_ruleEnumSpecification=ruleEnumSpecification 
	 { $current=$iv_ruleEnumSpecification.current; } 
	 EOF 
;

// Rule EnumSpecification
ruleEnumSpecification returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEnumSpecificationAccess().getEnumDefinitionParserRuleCall_0(), currentNode); 
    }
    this_EnumDefinition_0=ruleEnumDefinition
    { 
        $current = $this_EnumDefinition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEnumSpecificationAccess().getEnumReferenceParserRuleCall_1(), currentNode); 
    }
    this_EnumReference_1=ruleEnumReference
    { 
        $current = $this_EnumReference_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleEnumDefinition
entryRuleEnumDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumDefinitionRule(), currentNode); }
	 iv_ruleEnumDefinition=ruleEnumDefinition 
	 { $current=$iv_ruleEnumDefinition.current; } 
	 EOF 
;

// Rule EnumDefinition
ruleEnumDefinition returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'enum' 
    {
        createLeafNode(grammarAccess.getEnumDefinitionAccess().getEnumKeyword_0(), null); 
    }
(
(
		lv_id_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumDefinitionAccess().getIdIDTerminalRuleCall_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'{' 
    {
        createLeafNode(grammarAccess.getEnumDefinitionAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumDefinitionAccess().getEnumMemberListEnumMemberListParserRuleCall_3_0(), currentNode); 
	    }
		lv_enumMemberList_3_0=ruleEnumMemberList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"enumMemberList",
	        		lv_enumMemberList_3_0, 
	        		"EnumMemberList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getEnumDefinitionAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleEnumReference
entryRuleEnumReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumReferenceRule(), currentNode); }
	 iv_ruleEnumReference=ruleEnumReference 
	 { $current=$iv_ruleEnumReference.current; } 
	 EOF 
;

// Rule EnumReference
ruleEnumReference returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'enum' 
    {
        createLeafNode(grammarAccess.getEnumReferenceAccess().getEnumKeyword_0(), null); 
    }
(
(
		lv_id_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumReferenceAccess().getIdIDTerminalRuleCall_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleEnumMemberList
entryRuleEnumMemberList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumMemberListRule(), currentNode); }
	 iv_ruleEnumMemberList=ruleEnumMemberList 
	 { $current=$iv_ruleEnumMemberList.current; } 
	 EOF 
;

// Rule EnumMemberList
ruleEnumMemberList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEnumMemberListAccess().getEnumMemberParserRuleCall_0(), currentNode); 
    }
    this_EnumMember_0=ruleEnumMember
    { 
        $current = $this_EnumMember_0.current; 
        currentNode = currentNode.getParent();
    }
(	',' 
    {
        createLeafNode(grammarAccess.getEnumMemberListAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumMemberListAccess().getEnumMemberEnumMemberParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_enumMember_2_0=ruleEnumMember		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumMemberListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"enumMember",
	        		lv_enumMember_2_0, 
	        		"EnumMember", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleEnumMember
entryRuleEnumMember returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumMemberRule(), currentNode); }
	 iv_ruleEnumMember=ruleEnumMember 
	 { $current=$iv_ruleEnumMember.current; } 
	 EOF 
;

// Rule EnumMember
ruleEnumMember returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumMemberAccess().getAnnotationsAnnotationsParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumMemberRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotations", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_id_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumMemberAccess().getIdIDTerminalRuleCall_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumMemberRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getEnumMemberAccess().getEqualsSignKeyword_2_0(), null); 
    }
RULE_INT
    { 
    createLeafNode(grammarAccess.getEnumMemberAccess().getINTTerminalRuleCall_2_1(), null); 
    }
)?)
;





// Entry rule entryRuleDeclarators
entryRuleDeclarators returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeclaratorsRule(), currentNode); }
	 iv_ruleDeclarators=ruleDeclarators 
	 { $current=$iv_ruleDeclarators.current; } 
	 EOF 
;

// Rule Declarators
ruleDeclarators returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclaratorsAccess().getDecDeclaratorParserRuleCall_0_0(), currentNode); 
	    }
		lv_dec_0_0=ruleDeclarator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclaratorsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dec",
	        		lv_dec_0_0, 
	        		"Declarator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDeclaratorsAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclaratorsAccess().getDeclaratorListDeclaratorParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_declaratorList_2_0=ruleDeclarator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclaratorsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"declaratorList",
	        		lv_declaratorList_2_0, 
	        		"Declarator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleDeclarator
entryRuleDeclarator returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeclaratorRule(), currentNode); }
	 iv_ruleDeclarator=ruleDeclarator 
	 { $current=$iv_ruleDeclarator.current; } 
	 EOF 
;

// Rule Declarator
ruleDeclarator returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclaratorAccess().getPointerPointerSpecificationParserRuleCall_0_0(), currentNode); 
	    }
		lv_pointer_0_0=rulePointerSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclaratorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pointer",
	        		lv_pointer_0_0, 
	        		"PointerSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclaratorAccess().getDcDirectDeclaratorParserRuleCall_1_0(), currentNode); 
	    }
		lv_dc_1_0=ruleDirectDeclarator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclaratorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dc",
	        		lv_dc_1_0, 
	        		"DirectDeclarator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePointerSpecification
entryRulePointerSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPointerSpecificationRule(), currentNode); }
	 iv_rulePointerSpecification=rulePointerSpecification 
	 { $current=$iv_rulePointerSpecification.current; } 
	 EOF 
;

// Rule PointerSpecification
rulePointerSpecification returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPointerSpecificationAccess().getPointerSpecificationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPointerSpecificationAccess().getPointerSpecificationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPointerSpecificationAccess().getQualifiedPointerQualified_PointerSpecificationParserRuleCall_1_0(), currentNode); 
	    }
		lv_qualifiedPointer_1_0=ruleQualified_PointerSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPointerSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"qualifiedPointer",
	        		lv_qualifiedPointer_1_0, 
	        		"Qualified_PointerSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleQualified_PointerSpecification
entryRuleQualified_PointerSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualified_PointerSpecificationRule(), currentNode); }
	 iv_ruleQualified_PointerSpecification=ruleQualified_PointerSpecification 
	 { $current=$iv_ruleQualified_PointerSpecification.current; } 
	 EOF 
;

// Rule Qualified_PointerSpecification
ruleQualified_PointerSpecification returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getQualified_PointerSpecificationAccess().getQualified_PointerSpecificationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getQualified_PointerSpecificationAccess().getQualified_PointerSpecificationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'*' 
    {
        createLeafNode(grammarAccess.getQualified_PointerSpecificationAccess().getAsteriskKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualified_PointerSpecificationAccess().getTypeQualifierTypeQualifierEnumRuleCall_2_0(), currentNode); 
	    }
		lv_typeQualifier_2_0=ruleTypeQualifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualified_PointerSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeQualifier",
	        		lv_typeQualifier_2_0, 
	        		"TypeQualifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleDirectDeclarator
entryRuleDirectDeclarator returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDirectDeclaratorRule(), currentNode); }
	 iv_ruleDirectDeclarator=ruleDirectDeclarator 
	 { $current=$iv_ruleDirectDeclarator.current; } 
	 EOF 
;

// Rule DirectDeclarator
ruleDirectDeclarator returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_id_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDirectDeclaratorAccess().getIdIDTerminalRuleCall_0_0_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDirectDeclaratorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getDirectDeclaratorAccess().getLeftParenthesisKeyword_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDirectDeclaratorAccess().getDecDeclaratorParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_dec_2_0=ruleDeclarator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDirectDeclaratorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dec",
	        		lv_dec_2_0, 
	        		"Declarator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getDirectDeclaratorAccess().getRightParenthesisKeyword_0_1_2(), null); 
    }
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDirectDeclaratorAccess().getArrayArraySpecificationParserRuleCall_1_0(), currentNode); 
	    }
		lv_array_4_0=ruleArraySpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDirectDeclaratorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"array",
	        		lv_array_4_0, 
	        		"ArraySpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleArraySpecification
entryRuleArraySpecification returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArraySpecificationRule(), currentNode); } 
	 iv_ruleArraySpecification=ruleArraySpecification 
	 { $current=$iv_ruleArraySpecification.current.getText(); }  
	 EOF 
;

// Rule ArraySpecification
ruleArraySpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='[' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getArraySpecificationAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getArraySpecificationAccess().getINTTerminalRuleCall_1_0(), null); 
    }

    |    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getArraySpecificationAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)
	kw=']' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getArraySpecificationAccess().getRightSquareBracketKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleFullyQualifiedName
entryRuleFullyQualifiedName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFullyQualifiedNameRule(), currentNode); } 
	 iv_ruleFullyQualifiedName=ruleFullyQualifiedName 
	 { $current=$iv_ruleFullyQualifiedName.current.getText(); }  
	 EOF 
;

// Rule FullyQualifiedName
ruleFullyQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getFullyQualifiedNameAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFullyQualifiedNameAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getFullyQualifiedNameAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRuleConstantDefinition
entryRuleConstantDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstantDefinitionRule(), currentNode); }
	 iv_ruleConstantDefinition=ruleConstantDefinition 
	 { $current=$iv_ruleConstantDefinition.current; } 
	 EOF 
;

// Rule ConstantDefinition
ruleConstantDefinition returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'#define' 
    {
        createLeafNode(grammarAccess.getConstantDefinitionAccess().getDefineKeyword_0(), null); 
    }
(
(
		lv_id_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getConstantDefinitionAccess().getIdIDTerminalRuleCall_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleInterfaceDefinition
entryRuleInterfaceDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInterfaceDefinitionRule(), currentNode); }
	 iv_ruleInterfaceDefinition=ruleInterfaceDefinition 
	 { $current=$iv_ruleInterfaceDefinition.current; } 
	 EOF 
;

// Rule InterfaceDefinition
ruleInterfaceDefinition returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInterfaceDefinitionAccess().getAnnotationsAnnotationsParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInterfaceDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotations", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'interface' 
    {
        createLeafNode(grammarAccess.getInterfaceDefinitionAccess().getInterfaceKeyword_1(), null); 
    }
(	'unmanaged' 
    {
        createLeafNode(grammarAccess.getInterfaceDefinitionAccess().getUnmanagedKeyword_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInterfaceDefinitionAccess().getFqnFullyQualifiedNameParserRuleCall_3_0(), currentNode); 
	    }
		lv_fqn_3_0=ruleFullyQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInterfaceDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fqn",
	        		lv_fqn_3_0, 
	        		"FullyQualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getInterfaceDefinitionAccess().getColonKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInterfaceDefinitionAccess().getFqn2FullyQualifiedNameParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_fqn2_5_0=ruleFullyQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInterfaceDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fqn2",
	        		lv_fqn2_5_0, 
	        		"FullyQualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'{' 
    {
        createLeafNode(grammarAccess.getInterfaceDefinitionAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInterfaceDefinitionAccess().getMethodDefMethodDefinitionParserRuleCall_6_0(), currentNode); 
	    }
		lv_methodDef_7_0=ruleMethodDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInterfaceDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"methodDef",
	        		lv_methodDef_7_0, 
	        		"MethodDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getInterfaceDefinitionAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleMethodDefinition
entryRuleMethodDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMethodDefinitionRule(), currentNode); }
	 iv_ruleMethodDefinition=ruleMethodDefinition 
	 { $current=$iv_ruleMethodDefinition.current; } 
	 EOF 
;

// Rule MethodDefinition
ruleMethodDefinition returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodDefinitionAccess().getAnnotationsAnnotationsParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotations", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodDefinitionAccess().getQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_1_0(), currentNode); 
	    }
		lv_qualifiedTypeSpec_1_0=ruleQualifiedTypeSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"qualifiedTypeSpec",
	        		lv_qualifiedTypeSpec_1_0, 
	        		"QualifiedTypeSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_id_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMethodDefinitionAccess().getIdIDTerminalRuleCall_2_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	'(' 
    {
        createLeafNode(grammarAccess.getMethodDefinitionAccess().getLeftParenthesisKeyword_3_0_0(), null); 
    }
(	'void' 
    {
        createLeafNode(grammarAccess.getMethodDefinitionAccess().getVoidKeyword_3_0_1(), null); 
    }
)?	')' 
    {
        createLeafNode(grammarAccess.getMethodDefinitionAccess().getRightParenthesisKeyword_3_0_2(), null); 
    }
)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getMethodDefinitionAccess().getLeftParenthesisKeyword_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodDefinitionAccess().getParameterListParameterListParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_ParameterList_7_0=ruleParameterList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ParameterList",
	        		lv_ParameterList_7_0, 
	        		"ParameterList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getMethodDefinitionAccess().getRightParenthesisKeyword_3_1_2(), null); 
    }
))	';' 
    {
        createLeafNode(grammarAccess.getMethodDefinitionAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterListRule(), currentNode); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_0_0(), currentNode); 
	    }
		lv_param_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"param",
	        		lv_param_0_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getParameterListAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterListAccess().getParamsParameterParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_params_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_2_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	',' 
    {
        createLeafNode(grammarAccess.getParameterListAccess().getCommaKeyword_2_0(), null); 
    }
	'...' 
    {
        createLeafNode(grammarAccess.getParameterListAccess().getFullStopFullStopFullStopKeyword_2_1(), null); 
    }
)?)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getAnnotationsAnnotationsParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotations", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getParameterQualifierParameterQualifierEnumRuleCall_1_0(), currentNode); 
	    }
		lv_ParameterQualifier_1_0=ruleParameterQualifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ParameterQualifier",
	        		lv_ParameterQualifier_1_0, 
	        		"ParameterQualifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_2_0(), currentNode); 
	    }
		lv_qualifiedTypeSpec_2_0=ruleQualifiedTypeSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"qualifiedTypeSpec",
	        		lv_qualifiedTypeSpec_2_0, 
	        		"QualifiedTypeSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getDecDeclaratorParserRuleCall_3_0(), currentNode); 
	    }
		lv_dec_3_0=ruleDeclarator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dec",
	        		lv_dec_3_0, 
	        		"Declarator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleIncludeDirective
entryRuleIncludeDirective returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIncludeDirectiveRule(), currentNode); }
	 iv_ruleIncludeDirective=ruleIncludeDirective 
	 { $current=$iv_ruleIncludeDirective.current; } 
	 EOF 
;

// Rule IncludeDirective
ruleIncludeDirective returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'#include' 
    {
        createLeafNode(grammarAccess.getIncludeDirectiveAccess().getIncludeKeyword_0(), null); 
    }
((
(
		lv_importedURI_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getIncludeDirectiveAccess().getImportedURISTRINGTerminalRuleCall_1_0_0(), "importedURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIncludeDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importedURI",
	        		lv_importedURI_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_includeID_2_0=RULE_INCLUDELIB
		{
			createLeafNode(grammarAccess.getIncludeDirectiveAccess().getIncludeIDIncludeLibTerminalRuleCall_1_1_0(), "includeID"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIncludeDirectiveRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"includeID",
	        		lv_includeID_2_0, 
	        		"IncludeLib", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleAnnotations
entryRuleAnnotations returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationsRule(), currentNode); }
	 iv_ruleAnnotations=ruleAnnotations 
	 { $current=$iv_ruleAnnotations.current; } 
	 EOF 
;

// Rule Annotations
ruleAnnotations returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAnnotationsAccess().getAnnotationsAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAnnotationsAccess().getAnnotationsAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationsAccess().getAnnotationsAnnotationParserRuleCall_1_0(), currentNode); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_1_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationRule(), currentNode); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'@' 
    {
        createLeafNode(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationAccess().getFqnFullyQualifiedNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_fqn_1_0=ruleFullyQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fqn",
	        		lv_fqn_1_0, 
	        		"FullyQualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationParamatersAnnotationParametersParserRuleCall_2_0(), currentNode); 
	    }
		lv_annotationParamaters_2_0=ruleAnnotationParameters		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"annotationParamaters",
	        		lv_annotationParamaters_2_0, 
	        		"AnnotationParameters", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleAnnotationParameters
entryRuleAnnotationParameters returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationParametersRule(), currentNode); }
	 iv_ruleAnnotationParameters=ruleAnnotationParameters 
	 { $current=$iv_ruleAnnotationParameters.current; } 
	 EOF 
;

// Rule AnnotationParameters
ruleAnnotationParameters returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAnnotationParametersAccess().getAnnotationParametersAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAnnotationParametersAccess().getAnnotationParametersAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getAnnotationParametersAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationParametersAccess().getValuePairAnnotationValuePairsParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_valuePair_2_0=ruleAnnotationValuePairs		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationParametersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"valuePair",
	        		lv_valuePair_2_0, 
	        		"AnnotationValuePairs", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationParametersAccess().getValueAnnotationValueParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_value_3_0=ruleAnnotationValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationParametersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"AnnotationValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	')' 
    {
        createLeafNode(grammarAccess.getAnnotationParametersAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleAnnotationValuePairs
entryRuleAnnotationValuePairs returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationValuePairsRule(), currentNode); }
	 iv_ruleAnnotationValuePairs=ruleAnnotationValuePairs 
	 { $current=$iv_ruleAnnotationValuePairs.current; } 
	 EOF 
;

// Rule AnnotationValuePairs
ruleAnnotationValuePairs returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationValuePairsAccess().getFirstAnnotationValuePairParserRuleCall_0_0(), currentNode); 
	    }
		lv_first_0_0=ruleAnnotationValuePair		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationValuePairsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"first",
	        		lv_first_0_0, 
	        		"AnnotationValuePair", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getAnnotationValuePairsAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationValuePairsAccess().getListValueAnnotationValuePairParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_listValue_2_0=ruleAnnotationValuePair		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationValuePairsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"listValue",
	        		lv_listValue_2_0, 
	        		"AnnotationValuePair", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAnnotationValuePair
entryRuleAnnotationValuePair returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationValuePairRule(), currentNode); }
	 iv_ruleAnnotationValuePair=ruleAnnotationValuePair 
	 { $current=$iv_ruleAnnotationValuePair.current; } 
	 EOF 
;

// Rule AnnotationValuePair
ruleAnnotationValuePair returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_id_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAnnotationValuePairAccess().getIdIDTerminalRuleCall_0_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationValuePairRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getAnnotationValuePairAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationValuePairAccess().getValueAnnotationValueParserRuleCall_2_0(), currentNode); 
	    }
		lv_value_2_0=ruleAnnotationValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationValuePairRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"AnnotationValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAnnotationValue
entryRuleAnnotationValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationValueRule(), currentNode); }
	 iv_ruleAnnotationValue=ruleAnnotationValue 
	 { $current=$iv_ruleAnnotationValue.current; } 
	 EOF 
;

// Rule AnnotationValue
ruleAnnotationValue returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(rulesignedINT
    |	'null' 
    {
        createLeafNode(grammarAccess.getAnnotationValueAccess().getNullKeyword_1(), null); 
    }

    |RULE_BOOLEAN
    { 
    createLeafNode(grammarAccess.getAnnotationValueAccess().getBooleanTerminalRuleCall_2(), null); 
    }

    |RULE_ID
    { 
    createLeafNode(grammarAccess.getAnnotationValueAccess().getIDTerminalRuleCall_3(), null); 
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAnnotationValueAccess().getAnnotationParserRuleCall_4(), currentNode); 
    }
    this_Annotation_4=ruleAnnotation
    { 
        $current = $this_Annotation_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAnnotationValueAccess().getArrayAnnotationValueParserRuleCall_5(), currentNode); 
    }
    this_ArrayAnnotationValue_5=ruleArrayAnnotationValue
    { 
        $current = $this_ArrayAnnotationValue_5.current; 
        currentNode = currentNode.getParent();
    }

    |RULE_STRING
    { 
    createLeafNode(grammarAccess.getAnnotationValueAccess().getSTRINGTerminalRuleCall_6(), null); 
    }
)
;





// Entry rule entryRuleArrayAnnotationValue
entryRuleArrayAnnotationValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArrayAnnotationValueRule(), currentNode); }
	 iv_ruleArrayAnnotationValue=ruleArrayAnnotationValue 
	 { $current=$iv_ruleArrayAnnotationValue.current; } 
	 EOF 
;

// Rule ArrayAnnotationValue
ruleArrayAnnotationValue returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getArrayAnnotationValueAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArrayAnnotationValueAccess().getFirstValueAnnotationValueParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_firstValue_1_0=ruleAnnotationValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArrayAnnotationValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"firstValue",
	        		lv_firstValue_1_0, 
	        		"AnnotationValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getArrayAnnotationValueAccess().getCommaKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArrayAnnotationValueAccess().getValuesAnnotationValueParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_values_3_0=ruleAnnotationValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArrayAnnotationValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"values",
	        		lv_values_3_0, 
	        		"AnnotationValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'}' 
    {
        createLeafNode(grammarAccess.getArrayAnnotationValueAccess().getRightCurlyBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRulesignedINT
entryRulesignedINT returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignedINTRule(), currentNode); } 
	 iv_rulesignedINT=rulesignedINT 
	 { $current=$iv_rulesignedINT.current.getText(); }  
	 EOF 
;

// Rule signedINT
rulesignedINT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSignedINTAccess().getPlusSignKeyword_0_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSignedINTAccess().getHyphenMinusKeyword_0_1(), null); 
    }
)?    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getSignedINTAccess().getINTTerminalRuleCall_1(), null); 
    }
)
    ;





// Rule TypeQualifier
ruleTypeQualifier returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'const' 
	{
        $current = grammarAccess.getTypeQualifierAccess().getConstEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeQualifierAccess().getConstEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'volatile' 
	{
        $current = grammarAccess.getTypeQualifierAccess().getVolatileEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeQualifierAccess().getVolatileEnumLiteralDeclaration_1(), null); 
    }
));



// Rule TypeSpecifier
ruleTypeSpecifier returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'void' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getVoidEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getVoidEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'char' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getCharEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getCharEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'short' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getShortEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getShortEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'int' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getIntEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getIntEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'long' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getLongEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getLongEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'float' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getFloatEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getFloatEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'double' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getDoubleEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getDoubleEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'signed' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getSignedEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getSignedEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'unsigned' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getUnsignedEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getUnsignedEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'string' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getStringEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getStringEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'int8_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getInt8_tEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getInt8_tEnumLiteralDeclaration_10(), null); 
    }
)
    |(	'uint8_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getUint8_tEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getUint8_tEnumLiteralDeclaration_11(), null); 
    }
)
    |(	'int16_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getInt16_tEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getInt16_tEnumLiteralDeclaration_12(), null); 
    }
)
    |(	'uint16_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getUint16_tEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getUint16_tEnumLiteralDeclaration_13(), null); 
    }
)
    |(	'int32_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getInt32_tEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getInt32_tEnumLiteralDeclaration_14(), null); 
    }
)
    |(	'uint32_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getUint32_tEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getUint32_tEnumLiteralDeclaration_15(), null); 
    }
)
    |(	'int64_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getInt64_tEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getInt64_tEnumLiteralDeclaration_16(), null); 
    }
)
    |(	'uint64_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getUint64_tEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getUint64_tEnumLiteralDeclaration_17(), null); 
    }
)
    |(	'intptr_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getIntptr_tEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getIntptr_tEnumLiteralDeclaration_18(), null); 
    }
)
    |(	'uintptr_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getUintptr_tEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeSpecifierAccess().getUintptr_tEnumLiteralDeclaration_19(), null); 
    }
));



// Rule ParameterQualifier
ruleParameterQualifier returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'in' 
	{
        $current = grammarAccess.getParameterQualifierAccess().getInEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getParameterQualifierAccess().getInEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'out' 
	{
        $current = grammarAccess.getParameterQualifierAccess().getOutEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getParameterQualifierAccess().getOutEnumLiteralDeclaration_1(), null); 
    }
));



RULE_INCLUDELIB : '<' RULE_ID '.' RULE_ID '>';

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


