/*
* generated by Xtext
*/

package org.ow2.fractal.mind.idl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FractalItfGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ItfFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItfFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncludesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIncludesIncludeDirectiveParserRuleCall_0_0 = (RuleCall)cIncludesAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConstantAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cConstantConstantDefinitionParserRuleCall_1_0_0 = (RuleCall)cConstantAssignment_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypeTypeDefinitionParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cInterfaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInterfaceInterfaceDefinitionParserRuleCall_2_0 = (RuleCall)cInterfaceAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ItfFile:
		//  includes+=IncludeDirective* (constant+=ConstantDefinition|type+=TypeDefinition)*
		//  interface=InterfaceDefinition ";"?;   // itf definition
		//
		//
		//
		//    
		//        // Type definition part
		public ParserRule getRule() { return rule; }

		//includes+=IncludeDirective* (constant+=ConstantDefinition|type+=TypeDefinition)*
		//interface=InterfaceDefinition ";"?
		public Group getGroup() { return cGroup; }

		//includes+=IncludeDirective*
		public Assignment getIncludesAssignment_0() { return cIncludesAssignment_0; }

		//IncludeDirective
		public RuleCall getIncludesIncludeDirectiveParserRuleCall_0_0() { return cIncludesIncludeDirectiveParserRuleCall_0_0; }

		//(constant+=ConstantDefinition|type+=TypeDefinition)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//constant+=ConstantDefinition
		public Assignment getConstantAssignment_1_0() { return cConstantAssignment_1_0; }

		//ConstantDefinition
		public RuleCall getConstantConstantDefinitionParserRuleCall_1_0_0() { return cConstantConstantDefinitionParserRuleCall_1_0_0; }

		//type+=TypeDefinition
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//TypeDefinition
		public RuleCall getTypeTypeDefinitionParserRuleCall_1_1_0() { return cTypeTypeDefinitionParserRuleCall_1_1_0; }

		//interface=InterfaceDefinition
		public Assignment getInterfaceAssignment_2() { return cInterfaceAssignment_2; }

		//InterfaceDefinition
		public RuleCall getInterfaceInterfaceDefinitionParserRuleCall_2_0() { return cInterfaceInterfaceDefinitionParserRuleCall_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cTypedefSpecificationParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cStructOrUnionSpecificationParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cEnumSpecificationParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TypeDefinition:
		//  (TypedefSpecification|StructOrUnionSpecification|EnumSpecification) ";";   // Type definition part
		public ParserRule getRule() { return rule; }

		//(TypedefSpecification|StructOrUnionSpecification|EnumSpecification) ";"
		public Group getGroup() { return cGroup; }

		//TypedefSpecification|StructOrUnionSpecification|EnumSpecification
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//TypedefSpecification
		public RuleCall getTypedefSpecificationParserRuleCall_0_0() { return cTypedefSpecificationParserRuleCall_0_0; }

		//StructOrUnionSpecification
		public RuleCall getStructOrUnionSpecificationParserRuleCall_0_1() { return cStructOrUnionSpecificationParserRuleCall_0_1; }

		//EnumSpecification
		public RuleCall getEnumSpecificationParserRuleCall_0_2() { return cEnumSpecificationParserRuleCall_0_2; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class TypedefSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedefSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQualifedTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifedTypeQualifiedTypeSpecificationParserRuleCall_1_0 = (RuleCall)cQualifedTypeAssignment_1.eContents().get(0);
		private final Assignment cDecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDecDeclaratorsParserRuleCall_2_0 = (RuleCall)cDecAssignment_2.eContents().get(0);
		
		//TypedefSpecification:
		//  "typedef" qualifedType=QualifiedTypeSpecification dec=Declarators;
		public ParserRule getRule() { return rule; }

		//"typedef" qualifedType=QualifiedTypeSpecification dec=Declarators
		public Group getGroup() { return cGroup; }

		//"typedef"
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }

		//qualifedType=QualifiedTypeSpecification
		public Assignment getQualifedTypeAssignment_1() { return cQualifedTypeAssignment_1; }

		//QualifiedTypeSpecification
		public RuleCall getQualifedTypeQualifiedTypeSpecificationParserRuleCall_1_0() { return cQualifedTypeQualifiedTypeSpecificationParserRuleCall_1_0; }

		//dec=Declarators
		public Assignment getDecAssignment_2() { return cDecAssignment_2; }

		//Declarators
		public RuleCall getDecDeclaratorsParserRuleCall_2_0() { return cDecDeclaratorsParserRuleCall_2_0; }
	}

	public class QualifiedTypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedTypeSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeQualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeQualifierTypeQualifierEnumRuleCall_0_0 = (RuleCall)cTypeQualifierAssignment_0.eContents().get(0);
		private final Assignment cTypeSpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSpecTypeSpecificationParserRuleCall_1_0 = (RuleCall)cTypeSpecAssignment_1.eContents().get(0);
		
		//QualifiedTypeSpecification:
		//  typeQualifier+=TypeQualifier* typeSpec=TypeSpecification;
		public ParserRule getRule() { return rule; }

		//typeQualifier+=TypeQualifier* typeSpec=TypeSpecification
		public Group getGroup() { return cGroup; }

		//typeQualifier+=TypeQualifier*
		public Assignment getTypeQualifierAssignment_0() { return cTypeQualifierAssignment_0; }

		//TypeQualifier
		public RuleCall getTypeQualifierTypeQualifierEnumRuleCall_0_0() { return cTypeQualifierTypeQualifierEnumRuleCall_0_0; }

		//typeSpec=TypeSpecification
		public Assignment getTypeSpecAssignment_1() { return cTypeSpecAssignment_1; }

		//TypeSpecification
		public RuleCall getTypeSpecTypeSpecificationParserRuleCall_1_0() { return cTypeSpecTypeSpecificationParserRuleCall_1_0; }
	}

	public class TypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeDefNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefNameTypedefNameParserRuleCall_0_0 = (RuleCall)cTypeDefNameAssignment_0.eContents().get(0);
		private final RuleCall cStructOrUnionSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumSpecificationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Assignment cTypeSpecifierAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTypeSpecifierTypeSpecifierEnumRuleCall_3_0 = (RuleCall)cTypeSpecifierAssignment_3.eContents().get(0);
		
		//TypeSpecification:
		//  typeDefName=TypedefName|StructOrUnionSpecification|EnumSpecification|
		//  typeSpecifier+=TypeSpecifier+;
		public ParserRule getRule() { return rule; }

		//typeDefName=TypedefName|StructOrUnionSpecification|EnumSpecification|
		//typeSpecifier+=TypeSpecifier+
		public Alternatives getAlternatives() { return cAlternatives; }

		//typeDefName=TypedefName
		public Assignment getTypeDefNameAssignment_0() { return cTypeDefNameAssignment_0; }

		//TypedefName
		public RuleCall getTypeDefNameTypedefNameParserRuleCall_0_0() { return cTypeDefNameTypedefNameParserRuleCall_0_0; }

		//StructOrUnionSpecification
		public RuleCall getStructOrUnionSpecificationParserRuleCall_1() { return cStructOrUnionSpecificationParserRuleCall_1; }

		//EnumSpecification
		public RuleCall getEnumSpecificationParserRuleCall_2() { return cEnumSpecificationParserRuleCall_2; }

		//typeSpecifier+=TypeSpecifier+
		public Assignment getTypeSpecifierAssignment_3() { return cTypeSpecifierAssignment_3; }

		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierEnumRuleCall_3_0() { return cTypeSpecifierTypeSpecifierEnumRuleCall_3_0; }
	}

	public class TypedefNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedefName");
		private final RuleCall cFullyQualifiedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypedefName returns ecore::EString:
		//  FullyQualifiedName;
		public ParserRule getRule() { return rule; }

		//FullyQualifiedName
		public RuleCall getFullyQualifiedNameParserRuleCall() { return cFullyQualifiedNameParserRuleCall; }
	}

	public class StructOrUnionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructOrUnionSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructOrUnionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructorUnionReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StructOrUnionSpecification:
		//  StructOrUnionDefinition|StructorUnionReference;
		public ParserRule getRule() { return rule; }

		//StructOrUnionDefinition|StructorUnionReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//StructOrUnionDefinition
		public RuleCall getStructOrUnionDefinitionParserRuleCall_0() { return cStructOrUnionDefinitionParserRuleCall_0; }

		//StructorUnionReference
		public RuleCall getStructorUnionReferenceParserRuleCall_1() { return cStructorUnionReferenceParserRuleCall_1; }
	}

	public class StructOrUnionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructOrUnionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStructAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStructStructOrUnionParserRuleCall_0_0 = (RuleCall)cStructAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStructMemberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStructMemberStructMemberParserRuleCall_3_0 = (RuleCall)cStructMemberAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StructOrUnionDefinition:
		//  struct=StructOrUnion id=ID? "{" structMember+=StructMember* "}";
		public ParserRule getRule() { return rule; }

		//struct=StructOrUnion id=ID? "{" structMember+=StructMember* "}"
		public Group getGroup() { return cGroup; }

		//struct=StructOrUnion
		public Assignment getStructAssignment_0() { return cStructAssignment_0; }

		//StructOrUnion
		public RuleCall getStructStructOrUnionParserRuleCall_0_0() { return cStructStructOrUnionParserRuleCall_0_0; }

		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//structMember+=StructMember*
		public Assignment getStructMemberAssignment_3() { return cStructMemberAssignment_3; }

		//StructMember
		public RuleCall getStructMemberStructMemberParserRuleCall_3_0() { return cStructMemberStructMemberParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StructorUnionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructorUnionReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStructAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStructStructOrUnionParserRuleCall_0_0 = (RuleCall)cStructAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//StructorUnionReference:
		//  struct=StructOrUnion id=ID;
		public ParserRule getRule() { return rule; }

		//struct=StructOrUnion id=ID
		public Group getGroup() { return cGroup; }

		//struct=StructOrUnion
		public Assignment getStructAssignment_0() { return cStructAssignment_0; }

		//StructOrUnion
		public RuleCall getStructStructOrUnionParserRuleCall_0_0() { return cStructStructOrUnionParserRuleCall_0_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}

	public class StructOrUnionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructOrUnion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnionKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//StructOrUnion returns ecore::EString:
		//  "struct"|"union";
		public ParserRule getRule() { return rule; }

		//"struct"|"union"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }

		//"union"
		public Keyword getUnionKeyword_1() { return cUnionKeyword_1; }
	}

	public class StructMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualTypeQualifiedTypeSpecificationParserRuleCall_0_0 = (RuleCall)cQualTypeAssignment_0.eContents().get(0);
		private final Assignment cDecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDecDeclaratorsParserRuleCall_1_0 = (RuleCall)cDecAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StructMember:
		//  qualType=QualifiedTypeSpecification dec=Declarators (":" INT)? ";";
		public ParserRule getRule() { return rule; }

		//qualType=QualifiedTypeSpecification dec=Declarators (":" INT)? ";"
		public Group getGroup() { return cGroup; }

		//qualType=QualifiedTypeSpecification
		public Assignment getQualTypeAssignment_0() { return cQualTypeAssignment_0; }

		//QualifiedTypeSpecification
		public RuleCall getQualTypeQualifiedTypeSpecificationParserRuleCall_0_0() { return cQualTypeQualifiedTypeSpecificationParserRuleCall_0_0; }

		//dec=Declarators
		public Assignment getDecAssignment_1() { return cDecAssignment_1; }

		//Declarators
		public RuleCall getDecDeclaratorsParserRuleCall_1_0() { return cDecDeclaratorsParserRuleCall_1_0; }

		//(":" INT)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class EnumSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EnumSpecification:
		//  EnumDefinition|EnumReference;
		public ParserRule getRule() { return rule; }

		//EnumDefinition|EnumReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumDefinition
		public RuleCall getEnumDefinitionParserRuleCall_0() { return cEnumDefinitionParserRuleCall_0; }

		//EnumReference
		public RuleCall getEnumReferenceParserRuleCall_1() { return cEnumReferenceParserRuleCall_1; }
	}

	public class EnumDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnumMemberListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnumMemberListEnumMemberListParserRuleCall_3_0 = (RuleCall)cEnumMemberListAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumDefinition:
		//  "enum" id=ID? "{" enumMemberList=EnumMemberList "}";
		public ParserRule getRule() { return rule; }

		//"enum" id=ID? "{" enumMemberList=EnumMemberList "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//enumMemberList=EnumMemberList
		public Assignment getEnumMemberListAssignment_3() { return cEnumMemberListAssignment_3; }

		//EnumMemberList
		public RuleCall getEnumMemberListEnumMemberListParserRuleCall_3_0() { return cEnumMemberListEnumMemberListParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//EnumReference:
		//  "enum" id=ID;
		public ParserRule getRule() { return rule; }

		//"enum" id=ID
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}

	public class EnumMemberListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumMemberList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEnumMemberParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEnumMemberAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEnumMemberEnumMemberParserRuleCall_1_1_0 = (RuleCall)cEnumMemberAssignment_1_1.eContents().get(0);
		
		//EnumMemberList:
		//  EnumMember ("," enumMember+=EnumMember)*;
		public ParserRule getRule() { return rule; }

		//EnumMember ("," enumMember+=EnumMember)*
		public Group getGroup() { return cGroup; }

		//EnumMember
		public RuleCall getEnumMemberParserRuleCall_0() { return cEnumMemberParserRuleCall_0; }

		//("," enumMember+=EnumMember)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//enumMember+=EnumMember
		public Assignment getEnumMemberAssignment_1_1() { return cEnumMemberAssignment_1_1; }

		//EnumMember
		public RuleCall getEnumMemberEnumMemberParserRuleCall_1_1_0() { return cEnumMemberEnumMemberParserRuleCall_1_1_0; }
	}

	public class EnumMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//EnumMember:
		//  id=ID ("=" INT)?;
		public ParserRule getRule() { return rule; }

		//id=ID ("=" INT)?
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//("=" INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class DeclaratorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declarators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDecAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDecDeclaratorParserRuleCall_0_0 = (RuleCall)cDecAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDeclaratorListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclaratorListDeclaratorParserRuleCall_1_1_0 = (RuleCall)cDeclaratorListAssignment_1_1.eContents().get(0);
		
		//Declarators:
		//  dec=Declarator ("," declaratorList+=Declarator)*;
		public ParserRule getRule() { return rule; }

		//dec=Declarator ("," declaratorList+=Declarator)*
		public Group getGroup() { return cGroup; }

		//dec=Declarator
		public Assignment getDecAssignment_0() { return cDecAssignment_0; }

		//Declarator
		public RuleCall getDecDeclaratorParserRuleCall_0_0() { return cDecDeclaratorParserRuleCall_0_0; }

		//("," declaratorList+=Declarator)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//declaratorList+=Declarator
		public Assignment getDeclaratorListAssignment_1_1() { return cDeclaratorListAssignment_1_1; }

		//Declarator
		public RuleCall getDeclaratorListDeclaratorParserRuleCall_1_1_0() { return cDeclaratorListDeclaratorParserRuleCall_1_1_0; }
	}

	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeQualifierAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeQualifierTypeQualifierEnumRuleCall_0_1_0 = (RuleCall)cTypeQualifierAssignment_0_1.eContents().get(0);
		private final Assignment cDcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDcDirectDeclaratorParserRuleCall_1_0 = (RuleCall)cDcAssignment_1.eContents().get(0);
		
		//Declarator:
		//  ("*" typeQualifier+=TypeQualifier*)* dc=DirectDeclarator; 
		//
		//
		//        //PointerSpecification:
		////  qualifiedPointer+=(qualified_PointerSpecification)*;
		////
		////qualified_PointerSpecification:
		////  '*' (typeQualifier+=TypeQualifier)*;
		public ParserRule getRule() { return rule; }

		//("*" typeQualifier+=TypeQualifier*)* dc=DirectDeclarator
		public Group getGroup() { return cGroup; }

		//("*" typeQualifier+=TypeQualifier*)*
		public Group getGroup_0() { return cGroup_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_0() { return cAsteriskKeyword_0_0; }

		//typeQualifier+=TypeQualifier*
		public Assignment getTypeQualifierAssignment_0_1() { return cTypeQualifierAssignment_0_1; }

		//TypeQualifier
		public RuleCall getTypeQualifierTypeQualifierEnumRuleCall_0_1_0() { return cTypeQualifierTypeQualifierEnumRuleCall_0_1_0; }

		//dc=DirectDeclarator
		public Assignment getDcAssignment_1() { return cDcAssignment_1; }

		//DirectDeclarator
		public RuleCall getDcDirectDeclaratorParserRuleCall_1_0() { return cDcDirectDeclaratorParserRuleCall_1_0; }
	}

	public class DirectDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DirectDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cDeclaratorParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final RuleCall cArraySpecificationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DirectDeclarator:
		//  (id=ID|"(" Declarator ")") ArraySpecification*;   //PointerSpecification:
		////  qualifiedPointer+=(qualified_PointerSpecification)*;
		////
		////qualified_PointerSpecification:
		////  '*' (typeQualifier+=TypeQualifier)*;
		public ParserRule getRule() { return rule; }

		//(id=ID|"(" Declarator ")") ArraySpecification*
		public Group getGroup() { return cGroup; }

		//id=ID|"(" Declarator ")"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//id=ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0_0() { return cIdIDTerminalRuleCall_0_0_0; }

		//"(" Declarator ")"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }

		//Declarator
		public RuleCall getDeclaratorParserRuleCall_0_1_1() { return cDeclaratorParserRuleCall_0_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }

		//ArraySpecification*
		public RuleCall getArraySpecificationParserRuleCall_1() { return cArraySpecificationParserRuleCall_1; }
	}

	public class ArraySpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArraySpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArraySpecification returns ecore::EString:
		//  "[" (INT|ID) "]";
		public ParserRule getRule() { return rule; }

		//"[" (INT|ID) "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//INT|ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class FullyQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullyQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FullyQualifiedName returns ecore::EString:
		//  ID ("." ID)*; 
		//
		//
		//        // Interface definition part
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ConstantDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ConstantDefinition:
		//  "#define" id=ID INT;   // Interface definition part
		public ParserRule getRule() { return rule; }

		//"#define" id=ID INT
		public Group getGroup() { return cGroup; }

		//"#define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class InterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUnmanagedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFqnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFqnFullyQualifiedNameParserRuleCall_2_0 = (RuleCall)cFqnAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFqn2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFqn2FullyQualifiedNameParserRuleCall_3_1_0 = (RuleCall)cFqn2Assignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMethodDefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodDefMethodDefinitionParserRuleCall_5_0 = (RuleCall)cMethodDefAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InterfaceDefinition:
		//  "interface" "unmanaged"? fqn=FullyQualifiedName (":" fqn2=FullyQualifiedName)? "{"
		//  methodDef+=MethodDefinition* "}";
		public ParserRule getRule() { return rule; }

		//"interface" "unmanaged"? fqn=FullyQualifiedName (":" fqn2=FullyQualifiedName)? "{"
		//methodDef+=MethodDefinition* "}"
		public Group getGroup() { return cGroup; }

		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }

		//"unmanaged"?
		public Keyword getUnmanagedKeyword_1() { return cUnmanagedKeyword_1; }

		//fqn=FullyQualifiedName
		public Assignment getFqnAssignment_2() { return cFqnAssignment_2; }

		//FullyQualifiedName
		public RuleCall getFqnFullyQualifiedNameParserRuleCall_2_0() { return cFqnFullyQualifiedNameParserRuleCall_2_0; }

		//(":" fqn2=FullyQualifiedName)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//fqn2=FullyQualifiedName
		public Assignment getFqn2Assignment_3_1() { return cFqn2Assignment_3_1; }

		//FullyQualifiedName
		public RuleCall getFqn2FullyQualifiedNameParserRuleCall_3_1_0() { return cFqn2FullyQualifiedNameParserRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//methodDef+=MethodDefinition*
		public Assignment getMethodDefAssignment_5() { return cMethodDefAssignment_5; }

		//MethodDefinition
		public RuleCall getMethodDefMethodDefinitionParserRuleCall_5_0() { return cMethodDefMethodDefinitionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MethodDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifiedTypeSpecAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_0_0 = (RuleCall)cQualifiedTypeSpecAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cVoidKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameterListAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameterListParameterListParserRuleCall_2_1_1_0 = (RuleCall)cParameterListAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodDefinition:
		//  qualifiedTypeSpec=QualifiedTypeSpecification id=ID ("(" "void"? ")"|"(" ParameterList
		//  =ParameterList ")") ";";
		public ParserRule getRule() { return rule; }

		//qualifiedTypeSpec=QualifiedTypeSpecification id=ID ("(" "void"? ")"|"(" ParameterList
		//=ParameterList ")") ";"
		public Group getGroup() { return cGroup; }

		//qualifiedTypeSpec=QualifiedTypeSpecification
		public Assignment getQualifiedTypeSpecAssignment_0() { return cQualifiedTypeSpecAssignment_0; }

		//QualifiedTypeSpecification
		public RuleCall getQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_0_0() { return cQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_0_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"(" "void"? ")"|"(" ParameterList=ParameterList ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"(" "void"? ")"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }

		//"void"?
		public Keyword getVoidKeyword_2_0_1() { return cVoidKeyword_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }

		//"(" ParameterList=ParameterList ")"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }

		//ParameterList=ParameterList
		public Assignment getParameterListAssignment_2_1_1() { return cParameterListAssignment_2_1_1; }

		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_2_1_1_0() { return cParameterListParameterListParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamParameterParserRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//ParameterList:
		//  param=Parameter ("," params+=Parameter)* ("," "...")?;
		public ParserRule getRule() { return rule; }

		//param=Parameter ("," params+=Parameter)* ("," "...")?
		public Group getGroup() { return cGroup; }

		//param=Parameter
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }

		//Parameter
		public RuleCall getParamParameterParserRuleCall_0_0() { return cParamParameterParserRuleCall_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_1_0() { return cParamsParameterParserRuleCall_1_1_0; }

		//("," "...")?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_2_1() { return cFullStopFullStopFullStopKeyword_2_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterQualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterQualifierParameterQualifierEnumRuleCall_0_0 = (RuleCall)cParameterQualifierAssignment_0.eContents().get(0);
		private final Assignment cQualifiedTypeSpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_1_0 = (RuleCall)cQualifiedTypeSpecAssignment_1.eContents().get(0);
		private final Assignment cDecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDecDeclaratorParserRuleCall_2_0 = (RuleCall)cDecAssignment_2.eContents().get(0);
		
		//Parameter:
		//  ParameterQualifier+=ParameterQualifier* qualifiedTypeSpec=
		//  QualifiedTypeSpecification dec=Declarator;
		public ParserRule getRule() { return rule; }

		//ParameterQualifier+=ParameterQualifier* qualifiedTypeSpec=
		//QualifiedTypeSpecification dec=Declarator
		public Group getGroup() { return cGroup; }

		//ParameterQualifier+=ParameterQualifier*
		public Assignment getParameterQualifierAssignment_0() { return cParameterQualifierAssignment_0; }

		//ParameterQualifier
		public RuleCall getParameterQualifierParameterQualifierEnumRuleCall_0_0() { return cParameterQualifierParameterQualifierEnumRuleCall_0_0; }

		//qualifiedTypeSpec=QualifiedTypeSpecification
		public Assignment getQualifiedTypeSpecAssignment_1() { return cQualifiedTypeSpecAssignment_1; }

		//QualifiedTypeSpecification
		public RuleCall getQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_1_0() { return cQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_1_0; }

		//dec=Declarator
		public Assignment getDecAssignment_2() { return cDecAssignment_2; }

		//Declarator
		public RuleCall getDecDeclaratorParserRuleCall_2_0() { return cDecDeclaratorParserRuleCall_2_0; }
	}

	public class IncludeDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncludeDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathIncludePathParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//IncludeDirective:
		//  "#include" path=IncludePath;   // include directive
		public ParserRule getRule() { return rule; }

		//"#include" path=IncludePath
		public Group getGroup() { return cGroup; }

		//"#include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//path=IncludePath
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }

		//IncludePath
		public RuleCall getPathIncludePathParserRuleCall_1_0() { return cPathIncludePathParserRuleCall_1_0; }
	}

	public class IncludePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncludePath");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//IncludePath returns ecore::EString:
		//  STRING|"<" ID "." ID ">";
		public ParserRule getRule() { return rule; }

		//STRING|"<" ID "." ID ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//"<" ID "." ID ">"
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_3() { return cIDTerminalRuleCall_1_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_4() { return cGreaterThanSignKeyword_1_4; }
	}
	
	
	public class TypeQualifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TypeQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cConstEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cConstConstKeyword_0_0 = (Keyword)cConstEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVolatileEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVolatileVolatileKeyword_1_0 = (Keyword)cVolatileEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TypeQualifier:
		//  const | volatile;
		public EnumRule getRule() { return rule; }

		//const | volatile
		public Alternatives getAlternatives() { return cAlternatives; }

		//const
		public EnumLiteralDeclaration getConstEnumLiteralDeclaration_0() { return cConstEnumLiteralDeclaration_0; }

		//"const"
		public Keyword getConstConstKeyword_0_0() { return cConstConstKeyword_0_0; }

		//volatile
		public EnumLiteralDeclaration getVolatileEnumLiteralDeclaration_1() { return cVolatileEnumLiteralDeclaration_1; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_1_0() { return cVolatileVolatileKeyword_1_0; }
	}

	public class TypeSpecifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVoidEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVoidVoidKeyword_0_0 = (Keyword)cVoidEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCharEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCharCharKeyword_1_0 = (Keyword)cCharEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cShortEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cShortShortKeyword_2_0 = (Keyword)cShortEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIntIntKeyword_3_0 = (Keyword)cIntEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLongEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLongLongKeyword_4_0 = (Keyword)cLongEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFloatFloatKeyword_5_0 = (Keyword)cFloatEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDoubleDoubleKeyword_6_0 = (Keyword)cDoubleEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSignedEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSignedSignedKeyword_7_0 = (Keyword)cSignedEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cUnsignedEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cUnsignedUnsignedKeyword_8_0 = (Keyword)cUnsignedEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cStringStringKeyword_9_0 = (Keyword)cStringEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cInt8_tEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cInt8_tInt8_tKeyword_10_0 = (Keyword)cInt8_tEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cUint8_tEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cUint8_tUint8_tKeyword_11_0 = (Keyword)cUint8_tEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cInt16_tEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cInt16_tInt16_tKeyword_12_0 = (Keyword)cInt16_tEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cUint16_tEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cUint16_tUint16_tKeyword_13_0 = (Keyword)cUint16_tEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cInt32_tEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cInt32_tInt32_tKeyword_14_0 = (Keyword)cInt32_tEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cUint32_tEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cUint32_tUint32_tKeyword_15_0 = (Keyword)cUint32_tEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cInt64_tEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cInt64_tInt64_tKeyword_16_0 = (Keyword)cInt64_tEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cUint64_tEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cUint64_tUint64_tKeyword_17_0 = (Keyword)cUint64_tEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cIntptr_tEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cIntptr_tIntptr_tKeyword_18_0 = (Keyword)cIntptr_tEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cUintptr_tEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cUintptr_tUintptr_tKeyword_19_0 = (Keyword)cUintptr_tEnumLiteralDeclaration_19.eContents().get(0);
		
		//enum TypeSpecifier:
		//  void | char | short | int | long | float | double | signed | unsigned | string | int8_t | uint8_t |
		//  int16_t | uint16_t | int32_t | uint32_t | int64_t | uint64_t | intptr_t | uintptr_t;
		public EnumRule getRule() { return rule; }

		//void | char | short | int | long | float | double | signed | unsigned | string | int8_t | uint8_t |
		//int16_t | uint16_t | int32_t | uint32_t | int64_t | uint64_t | intptr_t | uintptr_t
		public Alternatives getAlternatives() { return cAlternatives; }

		//void
		public EnumLiteralDeclaration getVoidEnumLiteralDeclaration_0() { return cVoidEnumLiteralDeclaration_0; }

		//"void"
		public Keyword getVoidVoidKeyword_0_0() { return cVoidVoidKeyword_0_0; }

		//char
		public EnumLiteralDeclaration getCharEnumLiteralDeclaration_1() { return cCharEnumLiteralDeclaration_1; }

		//"char"
		public Keyword getCharCharKeyword_1_0() { return cCharCharKeyword_1_0; }

		//short
		public EnumLiteralDeclaration getShortEnumLiteralDeclaration_2() { return cShortEnumLiteralDeclaration_2; }

		//"short"
		public Keyword getShortShortKeyword_2_0() { return cShortShortKeyword_2_0; }

		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_3() { return cIntEnumLiteralDeclaration_3; }

		//"int"
		public Keyword getIntIntKeyword_3_0() { return cIntIntKeyword_3_0; }

		//long
		public EnumLiteralDeclaration getLongEnumLiteralDeclaration_4() { return cLongEnumLiteralDeclaration_4; }

		//"long"
		public Keyword getLongLongKeyword_4_0() { return cLongLongKeyword_4_0; }

		//float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_5() { return cFloatEnumLiteralDeclaration_5; }

		//"float"
		public Keyword getFloatFloatKeyword_5_0() { return cFloatFloatKeyword_5_0; }

		//double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_6() { return cDoubleEnumLiteralDeclaration_6; }

		//"double"
		public Keyword getDoubleDoubleKeyword_6_0() { return cDoubleDoubleKeyword_6_0; }

		//signed
		public EnumLiteralDeclaration getSignedEnumLiteralDeclaration_7() { return cSignedEnumLiteralDeclaration_7; }

		//"signed"
		public Keyword getSignedSignedKeyword_7_0() { return cSignedSignedKeyword_7_0; }

		//unsigned
		public EnumLiteralDeclaration getUnsignedEnumLiteralDeclaration_8() { return cUnsignedEnumLiteralDeclaration_8; }

		//"unsigned"
		public Keyword getUnsignedUnsignedKeyword_8_0() { return cUnsignedUnsignedKeyword_8_0; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_9() { return cStringEnumLiteralDeclaration_9; }

		//"string"
		public Keyword getStringStringKeyword_9_0() { return cStringStringKeyword_9_0; }

		//int8_t
		public EnumLiteralDeclaration getInt8_tEnumLiteralDeclaration_10() { return cInt8_tEnumLiteralDeclaration_10; }

		//"int8_t"
		public Keyword getInt8_tInt8_tKeyword_10_0() { return cInt8_tInt8_tKeyword_10_0; }

		//uint8_t
		public EnumLiteralDeclaration getUint8_tEnumLiteralDeclaration_11() { return cUint8_tEnumLiteralDeclaration_11; }

		//"uint8_t"
		public Keyword getUint8_tUint8_tKeyword_11_0() { return cUint8_tUint8_tKeyword_11_0; }

		//int16_t
		public EnumLiteralDeclaration getInt16_tEnumLiteralDeclaration_12() { return cInt16_tEnumLiteralDeclaration_12; }

		//"int16_t"
		public Keyword getInt16_tInt16_tKeyword_12_0() { return cInt16_tInt16_tKeyword_12_0; }

		//uint16_t
		public EnumLiteralDeclaration getUint16_tEnumLiteralDeclaration_13() { return cUint16_tEnumLiteralDeclaration_13; }

		//"uint16_t"
		public Keyword getUint16_tUint16_tKeyword_13_0() { return cUint16_tUint16_tKeyword_13_0; }

		//int32_t
		public EnumLiteralDeclaration getInt32_tEnumLiteralDeclaration_14() { return cInt32_tEnumLiteralDeclaration_14; }

		//"int32_t"
		public Keyword getInt32_tInt32_tKeyword_14_0() { return cInt32_tInt32_tKeyword_14_0; }

		//uint32_t
		public EnumLiteralDeclaration getUint32_tEnumLiteralDeclaration_15() { return cUint32_tEnumLiteralDeclaration_15; }

		//"uint32_t"
		public Keyword getUint32_tUint32_tKeyword_15_0() { return cUint32_tUint32_tKeyword_15_0; }

		//int64_t
		public EnumLiteralDeclaration getInt64_tEnumLiteralDeclaration_16() { return cInt64_tEnumLiteralDeclaration_16; }

		//"int64_t"
		public Keyword getInt64_tInt64_tKeyword_16_0() { return cInt64_tInt64_tKeyword_16_0; }

		//uint64_t
		public EnumLiteralDeclaration getUint64_tEnumLiteralDeclaration_17() { return cUint64_tEnumLiteralDeclaration_17; }

		//"uint64_t"
		public Keyword getUint64_tUint64_tKeyword_17_0() { return cUint64_tUint64_tKeyword_17_0; }

		//intptr_t
		public EnumLiteralDeclaration getIntptr_tEnumLiteralDeclaration_18() { return cIntptr_tEnumLiteralDeclaration_18; }

		//"intptr_t"
		public Keyword getIntptr_tIntptr_tKeyword_18_0() { return cIntptr_tIntptr_tKeyword_18_0; }

		//uintptr_t
		public EnumLiteralDeclaration getUintptr_tEnumLiteralDeclaration_19() { return cUintptr_tEnumLiteralDeclaration_19; }

		//"uintptr_t"
		public Keyword getUintptr_tUintptr_tKeyword_19_0() { return cUintptr_tUintptr_tKeyword_19_0; }
	}

	public class ParameterQualifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ParameterQualifier:
		//  in | out; 
		//
		//  
		//        // include directive
		public EnumRule getRule() { return rule; }

		//in | out 
		//
		//  
		//        // include directive
		public Alternatives getAlternatives() { return cAlternatives; }

		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }

		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }

		//"out"
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
	}
	
	private ItfFileElements pItfFile;
	private TypeDefinitionElements pTypeDefinition;
	private TypedefSpecificationElements pTypedefSpecification;
	private QualifiedTypeSpecificationElements pQualifiedTypeSpecification;
	private TypeQualifierElements unknownRuleTypeQualifier;
	private TypeSpecificationElements pTypeSpecification;
	private TypedefNameElements pTypedefName;
	private TypeSpecifierElements unknownRuleTypeSpecifier;
	private StructOrUnionSpecificationElements pStructOrUnionSpecification;
	private StructOrUnionDefinitionElements pStructOrUnionDefinition;
	private StructorUnionReferenceElements pStructorUnionReference;
	private StructOrUnionElements pStructOrUnion;
	private StructMemberElements pStructMember;
	private EnumSpecificationElements pEnumSpecification;
	private EnumDefinitionElements pEnumDefinition;
	private EnumReferenceElements pEnumReference;
	private EnumMemberListElements pEnumMemberList;
	private EnumMemberElements pEnumMember;
	private DeclaratorsElements pDeclarators;
	private DeclaratorElements pDeclarator;
	private DirectDeclaratorElements pDirectDeclarator;
	private ArraySpecificationElements pArraySpecification;
	private FullyQualifiedNameElements pFullyQualifiedName;
	private ConstantDefinitionElements pConstantDefinition;
	private InterfaceDefinitionElements pInterfaceDefinition;
	private MethodDefinitionElements pMethodDefinition;
	private ParameterListElements pParameterList;
	private ParameterElements pParameter;
	private ParameterQualifierElements unknownRuleParameterQualifier;
	private IncludeDirectiveElements pIncludeDirective;
	private IncludePathElements pIncludePath;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FractalItfGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ItfFile:
	//  includes+=IncludeDirective* (constant+=ConstantDefinition|type+=TypeDefinition)*
	//  interface=InterfaceDefinition ";"?;   // itf definition
	//
	//
	//
	//    
	//        // Type definition part
	public ItfFileElements getItfFileAccess() {
		return (pItfFile != null) ? pItfFile : (pItfFile = new ItfFileElements());
	}
	
	public ParserRule getItfFileRule() {
		return getItfFileAccess().getRule();
	}

	//TypeDefinition:
	//  (TypedefSpecification|StructOrUnionSpecification|EnumSpecification) ";";   // Type definition part
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return (pTypeDefinition != null) ? pTypeDefinition : (pTypeDefinition = new TypeDefinitionElements());
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//TypedefSpecification:
	//  "typedef" qualifedType=QualifiedTypeSpecification dec=Declarators;
	public TypedefSpecificationElements getTypedefSpecificationAccess() {
		return (pTypedefSpecification != null) ? pTypedefSpecification : (pTypedefSpecification = new TypedefSpecificationElements());
	}
	
	public ParserRule getTypedefSpecificationRule() {
		return getTypedefSpecificationAccess().getRule();
	}

	//QualifiedTypeSpecification:
	//  typeQualifier+=TypeQualifier* typeSpec=TypeSpecification;
	public QualifiedTypeSpecificationElements getQualifiedTypeSpecificationAccess() {
		return (pQualifiedTypeSpecification != null) ? pQualifiedTypeSpecification : (pQualifiedTypeSpecification = new QualifiedTypeSpecificationElements());
	}
	
	public ParserRule getQualifiedTypeSpecificationRule() {
		return getQualifiedTypeSpecificationAccess().getRule();
	}

	//enum TypeQualifier:
	//  const | volatile;
	public TypeQualifierElements getTypeQualifierAccess() {
		return (unknownRuleTypeQualifier != null) ? unknownRuleTypeQualifier : (unknownRuleTypeQualifier = new TypeQualifierElements());
	}
	
	public EnumRule getTypeQualifierRule() {
		return getTypeQualifierAccess().getRule();
	}

	//TypeSpecification:
	//  typeDefName=TypedefName|StructOrUnionSpecification|EnumSpecification|
	//  typeSpecifier+=TypeSpecifier+;
	public TypeSpecificationElements getTypeSpecificationAccess() {
		return (pTypeSpecification != null) ? pTypeSpecification : (pTypeSpecification = new TypeSpecificationElements());
	}
	
	public ParserRule getTypeSpecificationRule() {
		return getTypeSpecificationAccess().getRule();
	}

	//TypedefName returns ecore::EString:
	//  FullyQualifiedName;
	public TypedefNameElements getTypedefNameAccess() {
		return (pTypedefName != null) ? pTypedefName : (pTypedefName = new TypedefNameElements());
	}
	
	public ParserRule getTypedefNameRule() {
		return getTypedefNameAccess().getRule();
	}

	//enum TypeSpecifier:
	//  void | char | short | int | long | float | double | signed | unsigned | string | int8_t | uint8_t |
	//  int16_t | uint16_t | int32_t | uint32_t | int64_t | uint64_t | intptr_t | uintptr_t;
	public TypeSpecifierElements getTypeSpecifierAccess() {
		return (unknownRuleTypeSpecifier != null) ? unknownRuleTypeSpecifier : (unknownRuleTypeSpecifier = new TypeSpecifierElements());
	}
	
	public EnumRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}

	//StructOrUnionSpecification:
	//  StructOrUnionDefinition|StructorUnionReference;
	public StructOrUnionSpecificationElements getStructOrUnionSpecificationAccess() {
		return (pStructOrUnionSpecification != null) ? pStructOrUnionSpecification : (pStructOrUnionSpecification = new StructOrUnionSpecificationElements());
	}
	
	public ParserRule getStructOrUnionSpecificationRule() {
		return getStructOrUnionSpecificationAccess().getRule();
	}

	//StructOrUnionDefinition:
	//  struct=StructOrUnion id=ID? "{" structMember+=StructMember* "}";
	public StructOrUnionDefinitionElements getStructOrUnionDefinitionAccess() {
		return (pStructOrUnionDefinition != null) ? pStructOrUnionDefinition : (pStructOrUnionDefinition = new StructOrUnionDefinitionElements());
	}
	
	public ParserRule getStructOrUnionDefinitionRule() {
		return getStructOrUnionDefinitionAccess().getRule();
	}

	//StructorUnionReference:
	//  struct=StructOrUnion id=ID;
	public StructorUnionReferenceElements getStructorUnionReferenceAccess() {
		return (pStructorUnionReference != null) ? pStructorUnionReference : (pStructorUnionReference = new StructorUnionReferenceElements());
	}
	
	public ParserRule getStructorUnionReferenceRule() {
		return getStructorUnionReferenceAccess().getRule();
	}

	//StructOrUnion returns ecore::EString:
	//  "struct"|"union";
	public StructOrUnionElements getStructOrUnionAccess() {
		return (pStructOrUnion != null) ? pStructOrUnion : (pStructOrUnion = new StructOrUnionElements());
	}
	
	public ParserRule getStructOrUnionRule() {
		return getStructOrUnionAccess().getRule();
	}

	//StructMember:
	//  qualType=QualifiedTypeSpecification dec=Declarators (":" INT)? ";";
	public StructMemberElements getStructMemberAccess() {
		return (pStructMember != null) ? pStructMember : (pStructMember = new StructMemberElements());
	}
	
	public ParserRule getStructMemberRule() {
		return getStructMemberAccess().getRule();
	}

	//EnumSpecification:
	//  EnumDefinition|EnumReference;
	public EnumSpecificationElements getEnumSpecificationAccess() {
		return (pEnumSpecification != null) ? pEnumSpecification : (pEnumSpecification = new EnumSpecificationElements());
	}
	
	public ParserRule getEnumSpecificationRule() {
		return getEnumSpecificationAccess().getRule();
	}

	//EnumDefinition:
	//  "enum" id=ID? "{" enumMemberList=EnumMemberList "}";
	public EnumDefinitionElements getEnumDefinitionAccess() {
		return (pEnumDefinition != null) ? pEnumDefinition : (pEnumDefinition = new EnumDefinitionElements());
	}
	
	public ParserRule getEnumDefinitionRule() {
		return getEnumDefinitionAccess().getRule();
	}

	//EnumReference:
	//  "enum" id=ID;
	public EnumReferenceElements getEnumReferenceAccess() {
		return (pEnumReference != null) ? pEnumReference : (pEnumReference = new EnumReferenceElements());
	}
	
	public ParserRule getEnumReferenceRule() {
		return getEnumReferenceAccess().getRule();
	}

	//EnumMemberList:
	//  EnumMember ("," enumMember+=EnumMember)*;
	public EnumMemberListElements getEnumMemberListAccess() {
		return (pEnumMemberList != null) ? pEnumMemberList : (pEnumMemberList = new EnumMemberListElements());
	}
	
	public ParserRule getEnumMemberListRule() {
		return getEnumMemberListAccess().getRule();
	}

	//EnumMember:
	//  id=ID ("=" INT)?;
	public EnumMemberElements getEnumMemberAccess() {
		return (pEnumMember != null) ? pEnumMember : (pEnumMember = new EnumMemberElements());
	}
	
	public ParserRule getEnumMemberRule() {
		return getEnumMemberAccess().getRule();
	}

	//Declarators:
	//  dec=Declarator ("," declaratorList+=Declarator)*;
	public DeclaratorsElements getDeclaratorsAccess() {
		return (pDeclarators != null) ? pDeclarators : (pDeclarators = new DeclaratorsElements());
	}
	
	public ParserRule getDeclaratorsRule() {
		return getDeclaratorsAccess().getRule();
	}

	//Declarator:
	//  ("*" typeQualifier+=TypeQualifier*)* dc=DirectDeclarator; 
	//
	//
	//        //PointerSpecification:
	////  qualifiedPointer+=(qualified_PointerSpecification)*;
	////
	////qualified_PointerSpecification:
	////  '*' (typeQualifier+=TypeQualifier)*;
	public DeclaratorElements getDeclaratorAccess() {
		return (pDeclarator != null) ? pDeclarator : (pDeclarator = new DeclaratorElements());
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}

	//DirectDeclarator:
	//  (id=ID|"(" Declarator ")") ArraySpecification*;   //PointerSpecification:
	////  qualifiedPointer+=(qualified_PointerSpecification)*;
	////
	////qualified_PointerSpecification:
	////  '*' (typeQualifier+=TypeQualifier)*;
	public DirectDeclaratorElements getDirectDeclaratorAccess() {
		return (pDirectDeclarator != null) ? pDirectDeclarator : (pDirectDeclarator = new DirectDeclaratorElements());
	}
	
	public ParserRule getDirectDeclaratorRule() {
		return getDirectDeclaratorAccess().getRule();
	}

	//ArraySpecification returns ecore::EString:
	//  "[" (INT|ID) "]";
	public ArraySpecificationElements getArraySpecificationAccess() {
		return (pArraySpecification != null) ? pArraySpecification : (pArraySpecification = new ArraySpecificationElements());
	}
	
	public ParserRule getArraySpecificationRule() {
		return getArraySpecificationAccess().getRule();
	}

	//FullyQualifiedName returns ecore::EString:
	//  ID ("." ID)*; 
	//
	//
	//        // Interface definition part
	public FullyQualifiedNameElements getFullyQualifiedNameAccess() {
		return (pFullyQualifiedName != null) ? pFullyQualifiedName : (pFullyQualifiedName = new FullyQualifiedNameElements());
	}
	
	public ParserRule getFullyQualifiedNameRule() {
		return getFullyQualifiedNameAccess().getRule();
	}

	//ConstantDefinition:
	//  "#define" id=ID INT;   // Interface definition part
	public ConstantDefinitionElements getConstantDefinitionAccess() {
		return (pConstantDefinition != null) ? pConstantDefinition : (pConstantDefinition = new ConstantDefinitionElements());
	}
	
	public ParserRule getConstantDefinitionRule() {
		return getConstantDefinitionAccess().getRule();
	}

	//InterfaceDefinition:
	//  "interface" "unmanaged"? fqn=FullyQualifiedName (":" fqn2=FullyQualifiedName)? "{"
	//  methodDef+=MethodDefinition* "}";
	public InterfaceDefinitionElements getInterfaceDefinitionAccess() {
		return (pInterfaceDefinition != null) ? pInterfaceDefinition : (pInterfaceDefinition = new InterfaceDefinitionElements());
	}
	
	public ParserRule getInterfaceDefinitionRule() {
		return getInterfaceDefinitionAccess().getRule();
	}

	//MethodDefinition:
	//  qualifiedTypeSpec=QualifiedTypeSpecification id=ID ("(" "void"? ")"|"(" ParameterList
	//  =ParameterList ")") ";";
	public MethodDefinitionElements getMethodDefinitionAccess() {
		return (pMethodDefinition != null) ? pMethodDefinition : (pMethodDefinition = new MethodDefinitionElements());
	}
	
	public ParserRule getMethodDefinitionRule() {
		return getMethodDefinitionAccess().getRule();
	}

	//ParameterList:
	//  param=Parameter ("," params+=Parameter)* ("," "...")?;
	public ParameterListElements getParameterListAccess() {
		return (pParameterList != null) ? pParameterList : (pParameterList = new ParameterListElements());
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Parameter:
	//  ParameterQualifier+=ParameterQualifier* qualifiedTypeSpec=
	//  QualifiedTypeSpecification dec=Declarator;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//enum ParameterQualifier:
	//  in | out; 
	//
	//  
	//        // include directive
	public ParameterQualifierElements getParameterQualifierAccess() {
		return (unknownRuleParameterQualifier != null) ? unknownRuleParameterQualifier : (unknownRuleParameterQualifier = new ParameterQualifierElements());
	}
	
	public EnumRule getParameterQualifierRule() {
		return getParameterQualifierAccess().getRule();
	}

	//IncludeDirective:
	//  "#include" path=IncludePath;   // include directive
	public IncludeDirectiveElements getIncludeDirectiveAccess() {
		return (pIncludeDirective != null) ? pIncludeDirective : (pIncludeDirective = new IncludeDirectiveElements());
	}
	
	public ParserRule getIncludeDirectiveRule() {
		return getIncludeDirectiveAccess().getRule();
	}

	//IncludePath returns ecore::EString:
	//  STRING|"<" ID "." ID ">";
	public IncludePathElements getIncludePathAccess() {
		return (pIncludePath != null) ? pIncludePath : (pIncludePath = new IncludePathElements());
	}
	
	public ParserRule getIncludePathRule() {
		return getIncludePathAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
